{
    "constant": [
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, BBB, AAB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BCC, AAC, AAB, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "AAC, BBC, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBB, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, BBC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, AAA, AAB, BBB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, AAA, ABB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "ABB, AAA, AAB, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAA, AAB, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "ABB, AAB, CCC, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, BBB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, AAA, AAB, BBB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BCC, BBC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BBB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, ABB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, CCC, AAB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, AAA, ACC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, AAA, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, AAC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAA, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, AAA, AAB, ABB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAB, BBC, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "ABB, AAA, CCC, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, CCC, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAA, BBC, AAC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "AAB, BBC, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "ABB, AAA, CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "CCC, AAA, AAB, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, AAB, AAA, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, CCC, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, AAA, AAB, ABB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "ABB, AAB, CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "ABB, AAB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BCC, AAA, ACC, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAA, CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, CCC, AAB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, CCC, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, CCC, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAA, CCC, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "ABB, AAA, CCC, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAA, AAB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, CCC, AAB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAA, AAB, BBB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, AAA, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAB, CCC, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, AAB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "ABB, AAB, AAA, CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAB, BBC, AAC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, CCC, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, AAB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "AAA, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, AAA, AAB, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBB, ACC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, BBC, AAC, AAB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAC, BBC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, BBB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, CCC, AAA, AAB, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BCC, AAB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, AAB, ABB, BBB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "ABB, AAB, AAA, CCC, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAA, AAB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAA, AAB, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAB, ABB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAA, BBC, AAC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, AAA, AAB, BBB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAB, BBC, AAA, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "AAC, BBC, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "CCC, AAB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAB, AAC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, BBC, ACC, AAB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, AAA, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAA, AAB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, BBC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAB, ABB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, AAA, ABB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, CCC, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAC, BBB, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "ABB, AAB, CCC, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, AAA, AAB, BBB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAB, BBB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAA, BBC, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAB, ABB, BBB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, AAA, AAB, ABB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "CCC, ABB, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BCC, AAA, ACC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "ABB, AAB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BCC, AAA, ACC, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, AAA, AAB, BBB, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, BBB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, AAA, AAB, ABB, BBB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, ACC, ABC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, AAB, AAA, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "CCC, AAA, AAB, ABB, BBB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, CCC, AAA, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAA, BBC, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, CCC, AAB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, ABB, BBB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAA, AAB, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "ABB, AAA, CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAA, CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "CCC, ABB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, BBB, AAB, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "ABB, AAB, CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "ABB, AAA, CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, ABB, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAB, AAA, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "AAA, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAA, AAC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, AAA, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, AAA, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "AAB, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, BBB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BCC, AAB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "ABB, AAA, CCC, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "ABB, AAB, AAA, CCC, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAB, BBC, AAC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAB, CCC, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, AAC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, BBB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, BBB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, AAB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "AAB, BBC, AAC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, ABC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, AAA, AAB, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, AAA, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBB, ACC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BCC, BBC, AAC, AAB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAB, AAA, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, ABB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "CCC, ABB, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, CCC, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, AAA, AAB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "AAA, AAB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, AAA, ABB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, CCC, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, AAA, AAB, BBB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAC, BBB, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BCC, ACC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, AAA, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, BBB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "AAA, BBC, AAC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BCC, AAA, ACC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAA, CCC, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BCC, BBC, ACC, AAB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "ABB, AAA, AAB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, ABB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "CCC, AAA, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BCC, AAB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAA, BBB, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, AAA, AAB, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, ABB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ACC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAA, BBC, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, BBB, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "AAB, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAA, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "ABB, AAA, CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "ABB, AAA, AAB, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, CCC, ABB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAB, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ACC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, AAA, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BCC, ACC, ABC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, AAA, AAB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, AAA, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBB, ACC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "AAA, BBC, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "CCC, AAA, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAA, AAB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "AAB, BBC, AAC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, ABC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, ABC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAA, BBB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBB, ACC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BCC, BBC, AAC, AAB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, AAA, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, AAA, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, ABC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "CCC, AAA, AAB, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAA, AAB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAB, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, AAC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "CCC, AAB, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAA, AAC, BBB, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "ABB, AAA, AAB, CCC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BCC, AAC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, CCC, AAA, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BCC, AAB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "AAA, BBC, AAC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BCC, ACC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, AAA, AAB, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, AAB, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, CCC, AAB, AAA, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, CCC, ABB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, BBC, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BCC, BBC, ACC, AAB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "ABB, AAA, AAB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, BBC, AAA, AAB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "ABB, AAA, CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAA, CCC, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, CCC, AAB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAB, BBC, AAA, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BCC, BBB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, AAA, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, AAA, AAB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAA, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BCC, BBC, AAC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, ABC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BCC, ACC, ABC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, ABB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BCC, BBC, AAC, AAB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "AAA, BBC, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ACC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "AAA, BBB, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, CCC, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, ACC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAB, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, CCC, AAB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, AAC, AAB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, AAA, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAC, BBC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, AAC, AAB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, AAA, AAB, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, AAA, AAB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAA, CCC, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, AAA, AAB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "CCC, AAA, AAB, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAB, BBC, ABB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, AAA, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAA, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "ABB, AAA, AAB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, AAA, AAB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, ABB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BCC, AAB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAA, CCC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, CCC, AAB, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, AAA, AAB, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BCC, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, AAA, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, CCC, AAB, AAA, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, CCC, ABB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAA, AAB, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, AAA, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, ACC, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAB, CCC, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAA, CCC, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "AAC, BBC, ABB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, CCC, AAB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BCC, ACC, ABC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, AAB, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BCC, BBB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAB, AAA, ACC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAA, CCC, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, ABB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAA, AAB, BBB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, AAA, AAB, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, BBC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, BBC, AAC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAB, AAC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAA, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BCC, ABC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "AAA, BBB, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, AAA, AAB, BBB, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, CCC, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, ACC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, BBB, ABC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, AAA, BBB, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, AAA, AAB, ABB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, AAA, AAB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAB, ABB, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, AAB, BBB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, AAA, ABB, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "ABB, AAB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "ACC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAB, BBC, AAA, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, AAA, AAB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "ABB, AAA, AAB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAC, BBC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, CCC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, CCC, AAB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAA, BBB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, ABB, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAA, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BCC, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, AAA, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAA, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, BBC, AAA, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BCC, BBB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "AAC, BBC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "ABB, AAB, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, AAA, AAB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAA, AAC, AAB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, CCC, AAB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, CCC, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, AAC, BBB, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAB, CCC, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, ABB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, CCC, AAA, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, CCC, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, ABB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, AAB, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, AAB, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, AAA, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BCC, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "CCC, AAB, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, AAB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, AAA, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAA, CCC, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "ABB, AAB, CCC, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "AAB, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, AAB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, AAB, ABB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BCC, ACC, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, AAA, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAA, AAB, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAB, AAC, ABB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAB, AAA, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BCC, AAB, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BCC, BBC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, AAA, ACC, BBB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "ABB, AAB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "CC, BC",
            "black constraint": "BCC, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "CCC, ABB, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAB, AAC, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, AAA, AAB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, AAA, AAB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, BBB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, ABB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "AAA, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, AAA, ABB, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "CCC, AAA, AAB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "CCC, AAA, ABB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, ABB, AAB, CCC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "CCC, AAB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, CCC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAB, BBC, AAA, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "CCC, AAA, ABB, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAA, AAC, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, CCC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, AAA, AAB, ABB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "AAA, BBC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, CCC, AAB, ABB, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, BBB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, AAA, ABB, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, AAA, AAB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "ABB, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, AAC, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "AAC, BBC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAA, BBB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, ABB, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, CCC, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "CCC, AAB, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, CCC, ABB, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, BBB, AAB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "CCC, AAA, AAB, ABB, BBB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, ABB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, AAA, AAC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAA, AAB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BCC, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, BBB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, AAA, AAB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, AAA, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "ABB, AAA, CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, ABB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BCC, AAA, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BCC, ACC, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, CCC, AAB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BCC, AAB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, AAA, AAB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "ABB, AAA, CCC, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAB, BBC, AAA, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "AAB, BBC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAB, AAA, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, AAB, ABB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BCC, AAB, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BCC, AAB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAB, BBC, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "CCC, AAB, ABB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, AAB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "CCC, AAB, ABB, BBB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAB, BBC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAC, BBC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, AAB, ABB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "ABB, AAA, AAB, CCC, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, AAA, ACC, BBB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, AAA, AAB, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAB, AAC, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BCC, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, CCC, AAB, AAA, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, BBB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAA, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, AAA, AAB, ABB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, CCC, AAB, ABB, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, AAA, ABB, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, CCC, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "ABB, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "AAB, AAC, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, AAB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, CCC, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "CCC, AAA, ABB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, CCC, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, CCC, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAC, BBC, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "AAA, AAC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, BBC, AAA, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BCC, AAA, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BCC, ACC, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BCC, BBC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAA, CCC, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "AAA, BBC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, ABB, CCC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAA, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAB, AAA, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "ABC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAB, AAA, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, ABB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAA, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAB, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, AAA, AAB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, BBC, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, AAA, AAB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, ABB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, CCC, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BBB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, AAC, AAB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "CCC, AAA, AAB, ABB, BBB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, BBC, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, AAA, ABC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BCC, AAA, AAC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, CCC, AAB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAB, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BCC, AAB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, AAA, BBB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "ABB, AAA, CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, ABB, CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "AAB, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAA, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAA, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, AAB, ABB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "ABB, AAA, AAB, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAB, CCC, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, ABC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "CCC, AAA, ABB, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, AAA, AAB, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "AAB, BBC, AAA, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, AAA, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, CCC, AAB, AAA, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BCC, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAA, ABB, BBB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, CCC, AAB, AAA, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, BBB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "CCC, AAB, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, CCC, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAC, BBC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, CCC, AAB, AAA, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "AAB, AAC, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAB, CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC",
            "black constraint": "BCC, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAA, BBB, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, CCC, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "CCC, AAA, AAB, ABB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BCC, AAC, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAB, BBC, AAA, BBB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAB, CCC, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, AAA, AAB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, ABB, CCC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, BBB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BCC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAA, CCC, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAA, BBC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAB, BBC, BBB, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "ABB, AAA, CCC, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, AAA, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "CCC, AAA, AAB, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "AAC, BBC, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAB, ABB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "CCC, AAB, ABB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BCC, BBC, AAA, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "AAB, BBB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BCC, AAA, AAC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, AAA, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, CCC, AAB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "ABB, AAA, CCC, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "CCC, AAA, AAB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, ABB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, BBC, AAB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, BBB, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, AAA, AAB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAA, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, ABB, CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "AAA, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, BBC, AAB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BCC, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "ABB, AAA, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, ABB, BBB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, AAA, AAB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "ABB, AAA, CCC, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, AAA, AAB, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BCC, AAC, AAB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, AAB, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "AAB, BBC, AAA, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BCC, AAB, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAA, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, CCC, AAB, AAA, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BCC, BBB, AAB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, BBC, ACC, BBB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAA, AAC, BBB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "AAB, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAB, BBC, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, AAA, ABB, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, AAA, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, AAA, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, BBB, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAA, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAA, AAB, BBB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, ABB, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "CCC, AAA, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAA, BBC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BCC, AAA, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "ABC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAB, AAA, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, CCC, AAB, AAA, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, CCC, ABB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAB, BBC, AAA, BBB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BCC, BBC, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BBB, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, BBC, BBB, AAB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAA, AAB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAA, AAB, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "AAC, BBC, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAA, BBC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BCC, BBC, AAA, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "ABB, AAA, CCC, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAA, AAB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, BBB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, ABB, BBB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, CCC, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAA, BBC, AAC, BBB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, CCC, ABB, BBB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "AAA, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "AAB, AAC, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, AAA, AAB, ABB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAA, BBB, AAB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, CCC, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, AAA, AAB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "AAA, AAC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BCC, AAC, AAB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, ABB, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAA, AAB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "AAA, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, AAA, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, CCC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "AAB, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, ABB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, CCC, ABB, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, CCC, AAA, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "ABB, AAA, AAB, CCC, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, AAA, AAB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, ABB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "AAC, BBC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, AAA, AAB, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "CCC, AAA, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, AAB, ABB, BBB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, AAB, ABB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, ABB, BBB, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BCC, AAA, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, AAC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAB, AAA, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAB, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, AAB, ABB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BBB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAB, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "ABB, AAA, CCC, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "AAC, BBB, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, ACC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, CCC, AAB, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, CCC, AAB, ABB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, AAA, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, AAB, ABB, BBB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, ACC, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, AAB, ABB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, ACC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, ABB, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, AAB, ABB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAA, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, CCC, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "AAA, BBC, BBB, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, ACC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAA, ABC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BBB, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC",
            "black constraint": "BCC, BBC, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, BBC, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, ABB, BBB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, ACC, AAB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAA, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAB, BBB, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "ABB, AAA, AAB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BCC, AAA, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, ABB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAB, AAA, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, BBB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, AAA, AAB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAA, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, ABB, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "CCC, AAA, ABB, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, AAA, AAB, ABB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, AAA, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ACC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "CCC, AAA, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "CCC, AAA, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, AAA, AAB, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, CCC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "ABB, AAB, CCC, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, AAA, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, AAA, AAB, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "CCC, AAA, AAB, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAA, AAB, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, CCC, ABB, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, BBC, AAC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, AAB, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BBB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "AAC, BBC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, AAA, AAB, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAB, BBC, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, ABB, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "CCC, ABB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, AAA, AAB, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BCC, AAC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAC, ACC, ABB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, CCC, AAB, AAA, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, CCC, AAA, AAB, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, CCC, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BCC, BBC, AAA, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, AAB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "ABB, AAA, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAC, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BCC, ACC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, AAA, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, ACC, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, AAA, AAB, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, ABB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "CCC, AAB, ABB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "CCC, AAA, AAB, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BCC, BBB, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAB, BBB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAA, CCC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, AAA, AAB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, CCC, AAA, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "ABB, AAA, AAB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBB, ACC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, BBB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, BBB, AAB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, ABB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, AAA, AAB, ABB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, AAA, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAA, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAB, AAA, CCC, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, BBC, ABC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "AAC, BBC, ABB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BCC, ACC, AAB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, CCC, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, AAA, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, AAA, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "CCC, AAA, ABB, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, CCC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, AAA, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAA, AAB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, CCC, AAA, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, AAA, ABB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, AAA, ABB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, AAA, AAB, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BCC, ACC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "ABC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, AAA, AAB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, AAA, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, BBB, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BCC, AAC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAB, AAA, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, CCC, AAB, AAA, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, CCC, ABB, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, CCC, AAB, AAA, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "AAC, ABB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BCC, ACC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, AAB, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAB, CCC, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAB, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ACC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "CCC, AAA, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, BBC, AAA, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, BBB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "AAB, BBC, AAA, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, AAA, AAB, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, BBB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, AAB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "AAA, BBC, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "ABB, AAA, AAB, CCC, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, AAA, ABB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, AAA, AAB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "CCC, AAB, ABB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "ABB, AAA, AAB, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, AAA, AAB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, AAA, AAB, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAA, AAB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAB, BBC, BBB, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BCC, ACC, AAB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAA, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, AAA, AAC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BCC, AAA, AAB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "ABB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "CCC, AAB, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, AAB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "ABB, AAA, CCC, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAB, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "AAB, BBC, ABB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BCC, AAC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAA, BBC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, AAA, AAB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "ABB, AAA, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, CCC, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, AAA, AAB, BBB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAA, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, CCC, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "ABB, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, BBC, AAA, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, AAB, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "AAA, AAB, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, AAB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "ABB, AAA, CCC, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAA, AAC, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, CCC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "ABB, AAA, AAB, CCC, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "CCC, AAB, ABB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, AAA, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, AAA, ABB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, CCC, AAA, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAA, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "AAA, ACC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "AAA, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAA, AAB, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, CCC, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, ABB, AAA, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "AAB, AAA, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAA, AAB, BBB, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, AAA, AAB, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAB, BBC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAB, BBC, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, AAA, ABB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, CCC, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, AAA, ABB, BBB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BCC, BBC, AAC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "ABB, AAB, CCC, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "AAB, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, CCC, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAA, AAB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "ACC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "AAB, BBC, AAA, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BCC, AAA, AAB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "ABB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, AAB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, BBC, AAA, AAB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, BBC, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "AAA, BBB, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, AAB, ABB, BBB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BCC, AAA, AAC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAA, BBC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAA, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, AAB, ABB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, BBC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, AAB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "CCC, AAA, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAA, AAB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, CCC, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "CCC, ABB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, AAA, ABB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "CCC, AAB, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, CCC, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAA, AAB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BCC, AAA, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, CCC, AAA, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, ABB, CCC, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "ABB, AAA, CCC, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAA, AAB, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, AAB, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BCC, AAA, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "ABB, AAB, AAA, CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "AAA, BBC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, CCC, AAA, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, CCC, ABB, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "CCC, AAA, AAB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAB, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "ABB, AAB, CCC, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "AAB, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "AAB, AAC, ABB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BCC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, CCC, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "AAB, BBC, AAC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "ACC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, AAA, AAB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, AAA, ABB, BBB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "AAA, BBC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, AAA, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "AAB, BBC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, BBB, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, AAB, ABB, BBB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, ABB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "ABB, CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, CCC, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, BBB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, AAA, ABB, BBB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, AAB, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "ABB, AAA, AAB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAA, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAB, AAA, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BCC, AAA, AAC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, AAA",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAA, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, AAC, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, AAB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAA, AAB, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, ABB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, ACC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAA, ACC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BCC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, CCC, ABB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "AAA, BBB, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, BBC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, AAA, AAB, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, CCC, AAB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, ABB, CCC, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, BBC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, AAB, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, AAA, AAB, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, CCC, AAA, BBB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, AAA, AAB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, AAB, ABB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, ABB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, AAA, AAB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "ABB, AAB, CCC, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAB, AAA, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAA, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "CCC, AAB, ABB, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAA, BBC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, AAB, ABC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "CCC, AAA, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "AAB, BBC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, BBB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAA, AAB, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, AAA, ABB, BBB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, BBC, AAC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "ABB, AAA, AAB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "AAA, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, ACC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "CCC, AAA, AAB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, AAC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, ABB, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, AAA, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, CCC, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAB, BBC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAA, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "CCC, AAB, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, AAB, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, ACC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "ABB, AAB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "CCC, ABB, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, AAA, BBB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, CCC, AAB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAB, CCC, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, AAB, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "ABB, AAA, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, AAC, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "ABB, AAB, AAA, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "AAA, ACC, ABC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, AAB, ABB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BCC, AAC, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BCC, BBC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, ACC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, ABB, CCC, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, CCC, AAA, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, AAA, AAB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "AAA, ACC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAB, AAC, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, AAA, AAB, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, BBB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAB, CCC, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, AAB, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAA, BBC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAB, CCC, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, ABB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, CCC, AAB, ABB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, BBB, AAB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, ABB, AAB, CCC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAB, ABB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "CCC, AAA, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, BBB, AAB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, ABB, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BCC, AAB, ABC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, AAA, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, ABB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "ABB, AAB, CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "ABB, AAA, CCC, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, AAA, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAB, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, ABB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAB, ABB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, AAB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAC, BBB, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, AAB, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, AAA, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, CCC, ABB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BCC, BBC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAC, BBB, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, AAC, AAB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, AAB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "ABB, AAA, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAB, ABB, BBB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, AAC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "ABB, AAB, AAA, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, BBC, AAA, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAB, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, BBB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAA, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "AAA, BBC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BCC, AAC, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, ABB, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, ACC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "AAA, ACC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "AAB, ABB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, AAA, AAB, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "CCC, ABB, BBB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, AAA, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAA, AAB, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, AAA, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAB, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, AAA, ABB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAB, ABB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, CCC, AAA, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAA, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "AAB, AAC, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, AAA, AAB, BBB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAB, CCC, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAB, AAA, CCC, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, AAA, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BCC, AAB, ABC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAB, CCC, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "ACC, ABB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAB, AAC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "AAA, BBC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BCC, AAC, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, CCC, ABB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, CCC, AAA, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAA, CCC, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, AAA, ABC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, CCC, AAB, ABB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, AAA, BBB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAC, BBB, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ACC, ABC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAC, BBC, ABC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, AAB, BBB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "CCC, AAA, AAB, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, CCC, AAB, ABB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, AAB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "AAC, BBB, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAA, AAB, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "ABB, AAA, AAB, CCC, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, BBC, BBB, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAA, BBB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, BBB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "ABB, AAB, CCC, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "AAB, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAA, BBB, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, AAA, AAB, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "ABB, AAA, AAB, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, AAB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, BBB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, BBB, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAB, CCC, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, ABB, BBB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, ABB, BBB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, CCC, AAA, AAB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBB, ACC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, BBB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "AAB, AAC, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BCC, BBB, AAB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, AAB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, AAA, AAB, ABB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "ABB, AAA, AAB, CCC, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAB, AAA, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "CCC, AAA, AAB, ABB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, AAA, AAB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "CCC, AAB, ABB, BBB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, ABB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, BBC, AAA, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BCC, AAA, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, ABB, BBB, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, ACC, BBB, AAB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAA, BBC, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, BBB, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, AAA, BBB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, AAA, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, CCC, ABB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, AAA, AAB, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAB, BBC, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, BC",
            "black constraint": "BBC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "ABB, AAB, AAA, CCC, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, CCC, AAB, ABB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, CCC, AAA, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, CCC, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BCC, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, AAA, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, AAA, AAB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "CCC, AAB, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, CCC, AAB, AAA, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, BBC, AAA",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BCC, BBC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "CCC, AAB, ABB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "ABB, AAB, CCC, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "CCC, AAB, ABB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAA, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, CCC, AAB, ABB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, AAA, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, AAB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAA, AAB, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "AAC, BBB, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, AAA, BBB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAB, CCC, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAA, CCC, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "AAB, BBC, AAA",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, AAB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, AAB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "ABB, AAA, CCC, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "AAB, BBC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, ABB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "ABB, AAA, CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, BBB, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "ABB, AAB, CCC, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "AAB, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "AAB, BBB, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "AAB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, BBB, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, AAA, AAB, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, ABB, AAA, CCC, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "ABB, AAA, CCC, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, BBB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ACC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAB, CCC, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAB, ABB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BCC, AAA, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, AAB, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAA, AAB, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAA, AAB, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAA, CCC, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBB, ACC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, AAB, ABB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAB, BBC, ABB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, CCC, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, BBC, AAA, BBB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, CCC, AAB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "ABB, AAB, AAA, CCC, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, AAA, AAC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAA, AAB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBB, ABC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BCC, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, AAA, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, CCC, BBB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "ABB, AAB, CCC, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, BBC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAA, AAB, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, AAA, AAB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "AAC, ACC, ABB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAA, BBC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAA, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, CCC, AAA, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, CCC, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, CCC, AAB, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "CCC, AAB, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BCC, BBC, AAA",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAB, ACC, ABB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, AAA, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAA, AAB, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "AAB, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "CCC, AAA, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAA, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, CCC, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BCC, BBB, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, ABB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "ABB, AAA, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "AAB, BBC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAC, BBC, BBB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, BBC, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "CCC, AAB, ABB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAB, CCC, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBB, ACC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, BBB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAA, CCC, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAA, BBC, BBB, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, AAB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "CCC, AAA, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, CCC, AAA, AAB, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "AAA, BBC, ABC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAB, CCC, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BCC, AAC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, AAA, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "AAB, BBC, ABB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, AAC, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "ABB, AAA, CCC, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, BBB, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, AAB, ABB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "AAB, BBC, ABB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, AAB, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, CCC, AAB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, ABB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, AAB, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, AAB, BBB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, AAA, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "CCC, AAB, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "CCC, AAA, AAB, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, BBC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BCC, BBC, AAA",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, AAA, AAC, AAB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BCC, BBB, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BCC, BBC, AAA, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, AAA, AAB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, AAA, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "CCC, AAA, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BCC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, AAB, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, CCC, AAB, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAB, AAC, ABB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, BBC, AAC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, ACC, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "AAA, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, AAA, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, BBB, AAB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, BBC, AAC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, CCC, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, BBB, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, ABB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "AAB, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, AAB, BBB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, BBC, AAB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAA, ABB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, ABB, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, CCC, AAB, AAA, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAA, BBC, BBB, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, BBB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "CCC, AAA, AAB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, AAA, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAA, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "AAA, BBC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, BBB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, CCC, AAB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, AAA, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, AAA, AAB, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "ABB, AAA, CCC, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, AAB, ABB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAA, ACC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAC, ACC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, AAA, AAB, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "AAB, BBC, ABB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, AAA, AAB, ABB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "CCC, AAA, AAB, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, AAB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, CCC, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAA, AAB, BBB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, AAC, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, AAA, BBB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAB, BBC, AAC, BBB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, AAA, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "CCC, AAA, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAC, BBC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, AAA, AAB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAA, AAB, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAA, CCC, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, AAC, BBB, AAB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "AAB, BBC, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, ABB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, AAA, AAB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, BBC, ACC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAA, BBC, ACC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, AAB, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, CCC, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, AAA, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "CCC, AAA, AAB, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAA, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, AAB, BBB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, BBB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "ABB, AAA, AAB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, AAA, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, CCC, AAA, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBB, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, CCC, ABB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, CCC, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAA, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "AAB, AAC, ABB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "AAB, BBC, ABB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, ABB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, CCC, AAB, ABB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, BBB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, AAA, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, BBB, AAB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, AAB, ABB, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, CCC, AAB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, AAB, ABB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAA, AAB, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, CCC, ABB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "ABB, CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "ABB, AAB, CCC, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "CCC, AAB, ABB, BBB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAB, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, BBB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, AAA, AAB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, CCC, AAA, AAB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, CCC, AAB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, CCC, AAA, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, AAB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, CCC, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, CCC, AAB, ABB, BBB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAA, AAC, ACC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAA, BBC, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, BBB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, AAB, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAB, AAA, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAA, AAB, BBB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, AAA, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAA, AAB, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, AAA, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, CCC, AAA, ABB, BBB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, ABB, AAA, CCC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, ABB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "AAA, BBC, BBB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, AAB, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, AAB, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BCC, BBC, AAC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, AAB, BBB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, AAA, BBB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "CCC, AAB, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, AAA, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BCC, AAA, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAA, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAA, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "CCC, ABB, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "AAB, AAC, ABB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, BBC, AAA, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, CCC, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAA, AAB, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, BBB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "ABB, AAB, CCC, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "CCC, AAA, AAB, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAB, CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, CCC, ABB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "ABB, CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, CCC, ABB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAA, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, AAA, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, AAC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "AAA, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, CCC, AAB, ABB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "CCC, AAA, ABB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, AAB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAB, BBC, AAA, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, BBB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BCC, AAA, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "CCC, AAB, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, AAB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, AAA, AAB, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, AAB, ABB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, BBC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, AAA, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAA, AAB, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "AAA, AAC, ACC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAB, ABB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAB, ABB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BCC, AAC, ACC, AAB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, ABB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BCC, AAA, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, CCC, AAB, ABB, BBB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, BBB, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, AAA, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "AAB, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "ABB, AAA, CCC, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, AAA, BBB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, CCC, AAB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBB, ABC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, CCC, AAA, ABB, BBB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, CCC, AAA, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAB, AAA, CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "AAA, BBC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, AAA, AAB, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAB, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, ACC, BBB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, ABB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, AAA, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "AAB, BBC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, AAA, ABB, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, AAB, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BCC, AAB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, ABB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAB, BBC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, AAA, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, AAB, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ACC, ABB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "ABB, AAA, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAA, BBC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, BBB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "AAB, BBC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, AAA, AAB, BBB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAA, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BCC, AAA, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "ABB, AAB, CCC, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "ABB, AAB, CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAB, AAA, CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, CCC, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, AAB, ABB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, CCC, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, AAA, AAB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "ABB, AAB, AAA, CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "ABB, AAB, CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, ABB, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "CCC, AAA, AAB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "CCC, AAB, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAA, BBC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, BBC, AAB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "AAA, BBC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAB, ABB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "AAB, ABB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BCC, BBC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAB, AAA, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "AAB, ABB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, CCC, AAB, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, ABB, BBB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, BBB, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "ABB, AAA, CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, AAA, AAB, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, CCC, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAA, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, BBB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "AAA, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, AAA, AAB, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAB, ACC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "ABB, AAA, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAB, AAA, CCC, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "AAB, BBC, ABB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, AAA, AAB, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, ABC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "CCC, AAA, ABB, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, AAA, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, CCC, AAB, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAA, AAB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BCC, AAC, AAB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "ABB, AAA, AAB, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "ABB, AAB, CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAA, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, AAB, ABB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "ACC, ABB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAA, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, CCC, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, AAB, ABB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "AAA, BBC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, AAB, ABB, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "CCC, ABB, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "ABB, AAA, AAB, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, AAA, ABB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, AAB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "CCC, AAB, ABB, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAA, AAB, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, BBB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, BBB, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BCC, BBC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, CCC, AAA, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, AAB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAB, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "CCC, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "AAB, ABB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAA, BBB, AAB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, BBC, AAC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAB, BBB, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, AAA, AAB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "AAC, BBC, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAA, AAB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "CCC, AAA, ABB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAA, AAB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, CCC, AAB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, AAA, AAB, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, AAB, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, AAB, ABB, BBB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "AAB, AAC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, AAA, AAB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, CCC, AAB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, ABC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, CCC, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, AAB, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, ABB, BBB, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "ABB, AAA, CCC, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, AAA, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "ABB, AAA, CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, AAA, AAB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, BBC, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "AAB, BBC, ABB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "ACC, ABB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, AAA, AAB, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "ABB, AAB, CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "AAA, BBC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "AAA, BBC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "CCC, ABB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAA, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAC, ACC, ABB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "CCC, AAB, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, CCC, AAB, AAA, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAA, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAB, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAA, CCC, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "ABB, AAA, CCC, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, CCC, ABB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAA, AAB, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "AAB, ABB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, BBC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, AAB, ABB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "AAA, BBB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAA, BBC, AAC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "CCC, AAB, ABB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BCC, AAC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "ABB, AAA, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "ABB, AAB, CCC, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, AAB, ABB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, ACC, AAB, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, AAA, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "ABB, AAA, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, CCC, AAB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, AAB, ABB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BCC, BBB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAB, BBB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "CCC, AAB, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAB, BBB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAA, AAB, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAA, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, BBC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAA, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "AAA, AAC, AAB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAB, AAA, CCC, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAB, BBC, ACC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, CCC, AAA, AAB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, ABB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, BBB, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "AAB, BBB, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "ABB, CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAB, AAC, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "AAB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, BBC, AAA, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ACC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, CCC, AAB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "AAA, BBC, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "CCC, AAA, BBB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, AAA, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "AAB, BBC, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, CCC, AAB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, AAC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, CCC, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, BBC, AAB, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BCC, ABC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, AAA, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "CCC, ABB, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, AAA, AAB, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, AAB, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, AAA, AAB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAB, AAA, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "ABB, AAA, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, AAB, ABB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, ABB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, AAB, ABB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAC, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "CCC, ABB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "CCC, AAB, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "AAC, ACC, ABB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, AAB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, AAA, ABB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, AAA, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, BBB, ABC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, AAA, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BCC, ACC, AAB, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, AAA, AAB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "ABB, AAA, AAB, CCC, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "AAC, BBC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "AAB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAB, AAA, CCC, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAB, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAA, BBB, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "ABB, AAA, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BCC, BBC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "ABB, AAB, AAA, CCC, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, BBB, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "ABB, CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "CCC, AAB, ABB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, CCC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, AAA, AAB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, AAA, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, BBB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAA, AAB, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "CCC, AAB, ABB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "CCC, AAA, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "CCC, AAA, AAB, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BCC, ABC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "AAC, BBC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "AAA, AAB, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, BBB, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, AAA, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BBB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, AAA, AAB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "CCC, AAA, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, AAA, BBB, AAB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "CCC, ABB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, ABB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAA, AAB, BBB, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAB, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "ABB, AAA, AAB, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "AAB, ACC, ABB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "AAC, ACC, ABB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "AAB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BCC, AAC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAB, BBC, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, ABB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, BBC, AAC, BBB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, BBC, AAA, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BCC, AAA, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BCC, ACC, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, CCC, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, AAB, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BCC, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, BBC, AAA, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAA, AAB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BCC, ACC, AAB, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, ABB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, AAA, AAB, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAB, CCC, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, AAA, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BCC, BBC, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, ABB, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAA, AAB, BBB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAA, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, AAB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, ABB, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, ACC, BBB, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAA, AAB, BBB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAB, CCC, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "ABB, AAA, CCC, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, AAA, ABB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BCC, AAA, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "ABB, AAA, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BCC, BBC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "ABB, AAB, AAA, CCC, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BCC, ABC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAB, BBB, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "ABB, AAB, CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, CCC, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "ABB, AAB, CCC, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, AAA, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, AAB, ABB, BBB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, AAA, AAB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "CCC, AAA, ABB, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, ABB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, AAA, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "CCC, AAB, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "CCC, AAB, ABB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAC, BBC, BBB, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "AAA, BBC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, AAA, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAC, BBC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAB, AAC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "AAB, ABB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "AAA, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BCC, AAC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, AAA, BBB, AAB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAA, AAB, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, AAC, AAB, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, ABB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, AAA, ABB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAA, AAB, BBB, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, ABB, AAB, CCC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BCC, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, AAB, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, BBC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, AAA, AAB, BBB, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BCC, BBC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, AAA, AAB, ABB, BBB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BCC, AAB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BCC, AAA, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "AAA, AAB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAA, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, AAB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAA, AAB, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "CCC, AAA, ABB, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, CCC, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "CCC, AAB, ABB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, AAA, ABB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BCC, AAA, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BCC, BBC, AAB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, ABB, CCC, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAA, AAB, BBB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, ABB, AAA, CCC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "CCC, ABB, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "CCC, AAA, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BCC, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "AAA, BBC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "AAC, BBC, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, ABB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAB, AAA, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "AAC, ACC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "ABB, AAB, CCC, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, AAA, AAB, BBB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BCC, AAC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, CCC, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, AAA, AAB, ABB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "ABB, AAB, CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, CCC, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, ABB, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "CCC, AAB, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, ABB, CCC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, AAB, ABB, BBB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAA, AAB, BBB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "AAC, BBC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAA, AAB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAB, BBB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BCC, BBC, AAA, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAA, ABB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, AAA, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "AAB, ABB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "AAB, AAC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, ABB, CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAA, ABB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBB, ACC, ABC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAA, BBC, ABC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAA, AAB, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, ABB, BBB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAB, AAC, BBB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, BC",
            "black constraint": "BCC, BBC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAA, AAB, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, ABB, CCC, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, CCC, ABB, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, CCC, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, AAA, AAB, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAA, ABC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAC, BBB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, CCC, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, AAA, AAB, BBB, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "ABB, AAB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, CCC, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "ABB, AAA, AAB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, AAA, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "CCC, AAA, ABB, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, CCC, AAB, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, AAA, AAC, AAB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAB, BBC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "ABB, AAB, CCC, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "ABB, AAA, CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, AAA, AAB, ABB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAA, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, AAA, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, ABC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "CCC, AAB, ABB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "CCC, AAA, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "AAA, BBC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, AAB, ABB, BBB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, CCC, AAA, AAB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, CCC, AAA, AAB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAB, BBB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, AAA, AAB, ABB, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, AAB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, CCC, AAB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAA, AAC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAA, AAB, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, CCC, AAB, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, ABB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, CCC, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, CCC, AAB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "ABB, AAA, CCC, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, AAB, AAA, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, ABB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "AAB, AAC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, CCC, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "AAB, BBB, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, CCC, AAA, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAB, BBC, BBB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAA, BBC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAB, BBC, AAA, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAB, CCC, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "CCC, AAA, ABB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, AAA, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, AAA, AAB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "AAA, BBC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, AAA, AAB, BBB, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAA, AAB, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "ABB, AAA, AAB, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, CCC, AAA, ABB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAA, AAB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAB, AAA, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BCC, AAC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, AAC, AAB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAB, BBC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, BBC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAB, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, AAA, AAB, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "AAB, BBC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, BBB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BCC, AAA, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, AAA, AAB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, AAB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "AAB, BBC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BCC, ABC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "CCC, AAB, ABB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, AAA, AAB, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, AAA, ABB, BBB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, CCC, AAB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, BC",
            "black constraint": "BCC, BBC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, AAA, AAB, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, BBC, AAC, AAB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, CCC, AAB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAC, BBC, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "ABB, AAA, AAB, CCC, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, ABB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, AAA, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAB, CCC, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "CCC, AAB, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "ABB, AAB, CCC, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "AAB, BBB, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "AAB, BBC, AAA, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, CCC, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BBB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, CCC, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBB, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, ABB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, BBC, ACC, AAB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, AAB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, CCC, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAB, AAC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAA, AAB, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAB, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "CCC, AAA, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "AAB, BBB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, AAA, BBB, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, CCC, AAB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, CCC, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, ABB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BCC, AAA, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, ACC, ABC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "CCC, ABB, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "AAB, BBC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, ABB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "ACC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAA, BBB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BCC, ABC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, BBB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, AAA, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAA, ABB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "CCC, AAB, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAA, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, ABB, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BCC, AAC, AAB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, AAC, AAB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BCC, BBC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "CC, BC",
            "black constraint": "BBC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAB, CCC, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "CCC, ABB, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, BBC, AAA, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAA, AAC, AAB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "CCC, AAB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, CCC, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, AAB, AAA, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "AAA, BBC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, AAB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAA, AAC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, AAA, ABB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAB, AAA, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, ABB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "CCC, AAA, ABB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, CCC, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, CCC, AAA, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAB, AAA, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAA, BBC, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAA, CCC, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, AAA, BBB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAC, BBC, BBB, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "AAB, BBC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAB, BBC, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BCC, BBC, ACC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, BBB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, CCC, AAB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, AAA, AAB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAA, CCC, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BCC, AAB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "ABB, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAB, BBB, ABC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "CCC, AAA, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "AAB, AAC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, BC",
            "black constraint": "BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "ABB, AAA, CCC, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "CCC, AAA, ABB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BCC, AAC, AAB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BCC, AAC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, AAA, AAB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BCC, BBC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, CCC, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, ABB, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAA, BBB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, AAA, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "AAB, BBC, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BCC, ACC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, AAA, AAB, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, AAA, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "CCC, AAB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "AAA, BBB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAB, BBB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAB, CCC, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "ABB, AAB, CCC, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, CCC, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "CCC, AAB, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, CCC, AAB, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "AAA, BBB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, BBB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, AAB, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "ABB, AAB, CCC, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAB, AAA, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BCC, AAC, AAB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "ABB, AAB, CCC, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BCC, BBC, AAA, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, CCC, AAA, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "CCC, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "CCC, AAB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAA, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "AAA, AAC, AAB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, ABB, CCC, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAC, BBC, ABB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "CCC, AAA, ABB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, AAA, ABB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BCC, AAA, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAB, AAA, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, CCC, AAA, AAB, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAA, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "ABB, AAA, CCC, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "AAB, AAA, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, AAB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAA, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAA, BBC, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, AAA, BBB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BCC, AAC, AAB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAB, BBC, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "AAA, BBC, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BCC, AAB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "AAB, AAC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, AAA, AAB, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "ABB, AAA, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "CCC, ABB, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAA, BBB, ACC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "AAB, BBC, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, AAA, AAB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, CCC, AAB, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAB, AAA, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, AAA, AAB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, AAA, AAB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "AAA, BBB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, BBC, AAB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAB, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BCC, AAC, AAB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "ABB, AAA, AAB, CCC, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAB, AAA, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "AAB, BBB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "CCC, AAA, ABB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "ABB, AAB, CCC, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, BC",
            "black constraint": "BCC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BCC, BBC, AAA, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAA, ABB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAB, AAA, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "AAB, BBC, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAA, AAB, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, BBC, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "AAA, AAC, AAB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "AAC, BBC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC",
            "black constraint": "BBC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, ABB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, ABB, CCC, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, CCC, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAA, AAC, ABC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, AAB, ABB, BBB, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, CCC, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, AAB, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "CCC, ABB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, AAB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAA, AAB, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "ABB, AAA, CCC, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAB, CCC, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAA, AAB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "ABB, AAA, AAB, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, AAA, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAB, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, ACC, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, AAC, BBB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, BBB, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, AAA, BBB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, AAB, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, ABB, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "AAB, BBC, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, AAA, ABB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, AAB, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, CCC, AAA, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "AAA, BBB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, AAA, AAB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAC, BBC, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAA, BBB, ACC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAA, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, AAB, AAA, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, ABB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "AAC, BBC, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, CCC, AAA, ABB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, AAA, AAB, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, BBB, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, AAA, AAB, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, ABB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BBB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAC, ABB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BBB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAB, ACC, ABB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, BBB, ABC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, AAA, AAB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "CCC, AAA, ABB, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "AAA, BBC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, AAB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, AAA, AAB, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, AAA, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "AAB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "AAB, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BCC, AAA, AAB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAA, CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "ABB, AAA, AAB, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, BBC, AAB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "ABB, AAA, CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "ABC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAB, CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "AAC, BBC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "AAA, BBB, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, ABB, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "ABB, AAB, CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, CCC, AAA, ABB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAA, AAB, BBB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAA, CCC, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BCC, BBC, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAA, CCC, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, CCC, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "ABB, AAA, CCC, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, BBB, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "AAB, BBC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "CCC, AAA, AAB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, BBB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "AAC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAC, ACC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAA, AAC, BBB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAA, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAA, AAB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, AAA, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, AAB, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, AAA, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, AAB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, BBB, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAA, AAB, BBB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "ABB, AAB, CCC, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "AAA, AAB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, AAB, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BCC, AAA, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "CCC, AAB, ABB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, AAA, AAB, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "CCC, AAB, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, AAA, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, BBB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, CCC, AAA, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, ABB, CCC, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAA, BBB, ABC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, AAA, AAB, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "CCC, AAB, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "CC, BC",
            "black constraint": "BCC, BBC, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, ABB, AAA, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAB, AAA, CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, AAA, ACC, BBB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, CCC, AAA, ABB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, ABB, AAB, CCC, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "AAB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, CCC, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAA, BBC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BCC, AAA, AAB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "CCC, ABB, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAC, AAA, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, ABB, BBB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "ABC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, CCC, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAA, BBC, AAC, BBB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "CCC, ABB, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "AAB, BBC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAB, CCC, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAB, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, CCC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, ABB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, AAC, ACC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ACC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BCC, BBC, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BCC, AAA, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, ABB, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, ABB, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, CCC, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, CCC, AAA, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "AAC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "CCC, ABB, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BCC, BBC, AAB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAA, AAB, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, CCC, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, AAA, AAC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, AAC, AAB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, ABB, AAB, CCC, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAA, ACC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAC, ACC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, AAA, AAB, ABB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "ABB, AAB, CCC, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "AAA, AAB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BCC, AAA, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, AAA, AAC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAB, ACC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "AAB, BBC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "CCC, ABB, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, AAC, ABC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, ABC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, CCC, AAB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "AAB, BBC, AAA, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, AAB, ABB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, ABB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAA, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, AAB, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAC, BBC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "CCC, ABB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "ABB, AAA, AAB, CCC, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BCC, BBC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "AAC, BBC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAA, BBB, ABC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, AAA, AAB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, ACC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "AAB, BBC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "ABB, AAA, CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAA, ABB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, ABB, BBB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, AAB, ABB, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAA, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAA, ABC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAA, CCC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "CCC, AAA, ABB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "ABB, AAA, CCC, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, BC",
            "black constraint": "BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAA, AAB, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, CCC, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, CCC, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BCC, AAA, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, AAA, AAB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, BBC, AAA, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BCC, BBC, AAB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAB, AAA, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, CCC, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, AAC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, ABB, CCC, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "ABB, AAA, CCC, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, ABB, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, ABB, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAA, AAB, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAC, BBB, ABC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, CCC, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BCC, AAC, ACC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "CCC, AAB, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "ABB, AAA, AAB, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, AAA, AAB, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, AAB, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, CCC, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BBB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, AAC, AAB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "AAC, ACC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAA, AAB, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "AAA, BBB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, AAC, AAB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, CCC, AAA, AAB, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, AAB, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, CCC, AAA, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, AAA, BBB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BCC, AAC, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAB, AAA, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "ABB, AAB, CCC, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, CCC, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BCC, AAC, ABC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, AAA, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAB, AAA, CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, AAB, ABB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BCC, AAA, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "CCC, AAA, AAB, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BCC, BBC, AAB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, AAB, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "AAC, BBC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "CCC, ABB, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAA, AAB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BCC, ACC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAA, AAB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "AAC, BBB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, CCC, AAB, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "AAA, BBB, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "CCC, AAA, ABB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "AAA, BBC, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "AAA, ABC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, ABB, CCC, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "AAB, BBC, AAA, BBB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, BBB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, ABB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, AAA, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAA, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BCC, AAC, ACC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "CCC, AAA, AAB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, AAC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAB, BBC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "AAB, BBC, BBB, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, AAC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, ABB, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAB, CCC, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAA, AAB, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "AAB, AAA, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BCC, AAC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "AAC, BBC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, AAB, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, CCC, AAB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, AAA, AAB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAA, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BCC, AAC, ABC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, AAA, AAB, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, BBB, AAB, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "CCC, AAB, AAA, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "AAA, BBB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAB, AAA, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, AAB, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAA, ACC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAA, CCC, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAB, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, AAB, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "ABB, AAA, CCC, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "ABB, AAB, CCC, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "AAB, BBC, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAB, AAA, CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, CCC, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, AAA, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAB, ABB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "ABB, AAB, AAA, CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, CCC, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BCC, ACC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, BBB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "ABB, AAB, AAA, CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, AAB, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "AAA, ABC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, AAB, AAA, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, AAA, AAB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAA, AAB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, CCC, ABB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, BBC, BBB, AAB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "AAA, BBC, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "AAA, AAB, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "AAB, AAA, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, CCC, AAB, ABB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BCC, AAC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BCC, AAC, ABC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "ABB, AAA, AAB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAA, BBB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, AAA, ABB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, CCC, ABB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, ABB, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "CCC, AAA, AAB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "CCC, ABB, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, CCC, AAA, AAB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, AAA, AAB, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, AAA, AAB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAB, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, AAB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, ABB, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAA, AAC, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "AAC, BBC, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "CCC, AAA, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, AAB, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, AAA, ACC, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, CCC, AAA, ABB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, BBC, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, AAA, ABB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "ABB, AAB, AAA, CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, CCC, AAB, AAA, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, AAC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, AAA, ABB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, ABB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAA, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, ABB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAB, AAC, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "AAB, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, AAB, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BCC, AAC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BCC, AAA, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAB, AAA, CCC, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, ACC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAA, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BCC, BBC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, AAB, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "AAA, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "CCC, AAB, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, CCC, AAA, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, CCC, ABB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, ABB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, BBC, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAA, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, BBC, AAA, AAB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "CCC, ABB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "AAA, AAB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAB, BBB, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, AAA, ABB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, AAA, ABB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "CC",
            "black constraint": "CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, ABB, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAA, AAB, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, CCC, AAB, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, BBB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, AAA, AAB, BBB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "CCC, AAA, ABB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "AAC, BBC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, CCC, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, AAA, ACC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAA, AAB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAC, BBB, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, CCC, AAB, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, AAA, ABB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "ABB, AAA, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, AAB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAA, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, AAA, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, ABB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, CCC, AAB, AAA, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, AAB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, CCC, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "ABC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "AAA, AAC, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BCC, BBB, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, BBC, AAB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, ABB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, CCC, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BCC, AAA, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, AAA, ABB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, CCC, AAA, ABB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "CCC, ABB, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, BBC, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, AAA, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, AAA, AAB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBB, ABC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, AAA, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "CCC, AAA, AAB, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, AAB, ABB, BBB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, AAA, ABB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, AAA, AAB, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBB, ACC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "CCC, AAB, BBB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "CCC, ABB, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "AAA, AAB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAB, AAA, CCC, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "CCC, AAA, AAB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, CCC, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "AAC, BBC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAB, CCC, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, AAA, AAB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "CCC, AAB, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAA, BBC, AAC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, AAA, ABB, BBB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAA, AAB, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, ABB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "CCC, AAA, AAB, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "CCC, AAA, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, AAA, ABB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAB, BBC, AAA, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAB, AAA, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BCC, BBC, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, BBB, AAB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAA, AAB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAA, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAB, CCC, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, ABB, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, AAB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "AAA, AAC, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAA, BBB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, CCC, ABB, BBB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAB, BBB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAA, BBC, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, AAA, AAB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAA, AAC, BBB, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, AAB, ABB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "ABB, AAA, AAB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, CCC, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "AAB, BBB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "AAC, BBC, ABB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, ABB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, AAA, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, CCC, ABB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAB, AAA, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, CCC, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, BBC, AAB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAA, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, CCC, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, AAA, ABB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, BBB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "CCC, ABB, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, AAA, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAB, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, CCC, AAA, AAB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, AAC, BBB, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "ABB, AAB, CCC, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "AAB, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, AAA, ABB, BBB, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "AAB, BBC, ABB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, AAA, AAB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAA, ABB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, AAA, AAB, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BCC, BBC, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, AAB, AAA, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAB, AAA, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, ABB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, AAA, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, CCC, AAB, AAA, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, CCC, ABB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "AAC, BBC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, AAA, AAB, ABB, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, AAA, AAC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAB, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, BBB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BBB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "ABB, AAA, AAB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, CCC, ABB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, ABB, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, AAA, AAB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, BBB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, ABB, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAA, BBB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "CCC, AAB, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BCC, BBC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAA, AAC, BBB, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, CCC, ABB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, CCC, ABB, BBB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAA, BBB, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAA, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, CCC, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, CCC, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BCC, AAA, AAB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAA, BBC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ACC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "CCC, AAB, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, AAC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, CCC, AAB, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, AAC, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, CCC, AAA, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, CCC, AAB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAB, CCC, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, AAA, AAB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "CCC, ABB, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BCC, BBC, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, BBB, AAB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "AAB, AAA, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "CCC, AAA, ABB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, CCC, ABB, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, AAA, AAB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "CCC, AAA, AAB, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAA, AAB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, CCC, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAA, BBB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, AAB, ABB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "AAB, BBC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, AAA, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, ABB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BCC, BBC, ACC, AAB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, AAA, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, ABB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAA, AAC, BBB, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "AAC, ABB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAB, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "ABB, AAA, AAB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "CCC, ABB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "ABB, AAB, AAA, CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, CCC, BBB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "CCC, AAB, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAB, AAA, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, AAA, AAB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, CCC, AAA, ABB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, CCC, ABB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, AAB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, ABB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAA, AAB, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBB, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BCC, AAA, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, ABB, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, ABB, BBB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, ABB, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "CCC, ABB, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BCC, AAA, AAB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, ABB, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, AAA, AAB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, ABB, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, CCC, AAA, AAB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, AAA, AAB, BBB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "ABB, CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ACC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "AAB, AAA, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "CC, BC",
            "black constraint": "BCC, BBC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "CCC, AAA, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, AAA, BBB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBB, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "CCC, ABB, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, AAC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAB, AAA, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, CCC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, ABB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAC, BBC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "CCC, AAA, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "AAB, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BCC, BBB, AAB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "CCC, AAA, AAB, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "CCC, AAA, AAB, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "AAC, BBC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, AAA, ABC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, AAA, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, ABB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, CCC, AAB, AAA, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, ABB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BCC, AAA, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "CCC, ABB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, CCC, ABB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAB, BBB, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BCC, AAA, AAB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAA, AAB, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, AAA, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, BBB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAB, CCC, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, ACC, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAA, BBB, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, AAA, AAB, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, AAB, BBB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "ABB, AAB, AAA, CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, ACC, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAB, AAC, BBB, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAA, ABB, BBB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, BBB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAB, AAA, BBB, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "ACC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAC, BBB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, ABB, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, AAC, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, AAA, AAB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, ABB, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAA, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, AAA, AAB, ABB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, AAA, AAB, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, AAB, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, AAA, AAB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, AAB, ABB, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, AAA, AAB, BBB, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAB, AAA, ACC, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, BBB, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "CCC, AAA, AAB, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BCC, AAA, AAC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "AAB, ACC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, AAA, AAB, ABB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAB, ABB, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, AAA, BBB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAA, AAC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, CCC, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "CCC, AAB, ABB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "CCC, AAB, ABB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAB, AAC, BBB, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, AAA, AAB, BBB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAB, ABB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BCC, BBB, AAB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAB, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "CCC, ABB, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAA, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, AAB, AAA, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, AAA, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, AAB, ABC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BCC, AAA, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, CCC, ABB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAA, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, ABB, BBB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "CCC, AAB, ABB, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAA, CCC, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, AAA, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "CCC, ABB, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, CCC, AAB, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, CCC, AAA, AAB, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BCC, AAA, ABC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, AAA, BBB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BCC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, CCC, AAB, AAA, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAC, BBB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, AAB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, ABB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAB, AAA, BBB, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, AAB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAC, BBB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "CCC, AAA, AAB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "ABB, AAA, AAB, CCC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, ACC, AAB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, BBB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "AAC, BBB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAB, AAA, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAA, BBC, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "AAC, BBC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BCC, AAB, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "AAB, AAA, ACC, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, AAA, AAB, BBB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, CCC, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, AAA, AAB, ABB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, BBB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, CCC, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "CCC, ABB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAA, AAC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, AAA, ABB, BBB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, CCC, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC",
            "black constraint": "BCC, BBC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, AAB, ABB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, CCC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAA, AAC, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, BBB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "CCC, AAB, ABB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, CCC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAB, BBC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAB, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, AAB, AAA, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "AAB, BBB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, ABB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAA, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BCC, AAA, ABC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "AAB, ABB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, CCC, ABB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, AAA, AAC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAB, ABB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, AAB, AAA, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "CC, BC",
            "black constraint": "BBC, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "ABB, AAA, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, AAA, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, AAA, AAB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "ABB, AAA, CCC, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, AAB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAA, AAB, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAA, AAB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAB, BBC, AAA, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAB, AAA, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "AAC, BBB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAB, ABB, BBB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "AAB, BBC, AAA, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, AAB, ABB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAA, AAB, BBB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, CCC, ABB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, AAB, ABB, BBB, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BCC, BBB, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, AAC, ACC, BBB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, BBB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAA, BBC, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, ABB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, AAA, AAB, ABB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAA, BBC, BBB, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "AAA, BBC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, BBC, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, CCC, ABB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, CCC, AAB, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, CCC, ABB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, AAA, ABB, BBB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, AAA, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "ABB, AAB, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "AAA, AAC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "ABB, AAA, AAB, CCC, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAB, AAA, ABC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "ABB, AAA, CCC, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAC, BBC, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, BBC, AAA, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, CCC, AAA, AAB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAC, BBC, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, AAB, AAA, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, AAB, ABB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BCC, AAB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, AAA, AAB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, BBC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAA, AAC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, BBB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAA, AAB, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "ABB, AAA, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "AAC, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "ABB, AAB, CCC, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAA, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAB, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "ABB, AAA, CCC, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, AAA, AAB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAA, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BBB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, CCC, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, CCC, ABB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, CCC, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BBB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, BBC, AAC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAB, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, AAA, BBB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, CCC, AAA, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, AAA, BBB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, CCC, ABB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, CCC, AAB, BBB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAA, CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, AAA, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "AAC, BBC, ABC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, AAB, BBB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAB, CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, BBC, BBB, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, AAA, AAB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAA, AAB, BBB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BC",
            "black constraint": "BCC, BBC, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, CCC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, CCC, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, CCC, AAB, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAA, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, ABB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ACC, ABB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, AAA, AAB, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, AAA, AAB, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, AAA, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, CCC, AAA, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "CCC, AAB, ABB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, ABB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAA, BBB, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "ABB, AAB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, CCC, AAA, AAB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, CCC, AAA, AAB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "AAA, BBB, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BCC, BBC, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, CCC, AAB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, CCC, ABB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAB, CCC, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAB, AAA, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "CCC, ABB, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, BBC, ABC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, ACC, BBB, AAB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAC, BBC, ABB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, CCC, AAB, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAA, AAC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "CCC, ABB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAA, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, AAA, AAB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAB, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, ABB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, AAA, AAB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, BBC, AAA",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "CC, BC",
            "black constraint": "BCC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, ABB, AAB, CCC, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, AAA, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, AAA, AAB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BCC, BBC, AAC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "AAB, BBB, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, CCC, ABB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, AAA, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, AAA, AAB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, AAB, BBB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, AAA, AAB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, CCC, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "CCC, ABB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, ABB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "AAC, BBB, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, ABB, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, CCC, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "ABB, AAB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, AAA, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAA, BBC, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, AAA, AAB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BCC, BBC, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "CCC, AAB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, AAC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAA, AAB, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BCC, AAA, AAB, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, AAB, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, AAA, AAB, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, AAA, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAA, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "AAB, BBC, ABB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAA, AAB, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, AAB, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAB, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, BBC, AAA, BBB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAA, AAB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, BBB, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAC, BBC, ABB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "CCC, ABB, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "AAA, AAC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "AAC, BBC, ABB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, AAA, AAB, ABB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAC, BBC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "ABB, AAA, AAB, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBB, ABC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "AAC, BBC, ABB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, BBC, AAA, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "AAA, BBC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAB, AAA, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAA, AAB, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BCC, AAA, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, AAA, ABB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BCC, BBC, AAC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, AAA, AAB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, AAA, AAB, BBB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BCC, BBC, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "CCC, AAA, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAA, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, AAB, BBB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, AAA, AAB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BBB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAC, ABB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, AAA, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, AAC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, AAA, AAB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAC, BBB, ACC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAA, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAB, AAA, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAA, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "AAC, BBC, BBB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BBB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, CCC, ABB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, AAC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAB, CCC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, ABB, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BCC, AAA, AAB, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, AAA, AAB, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, AAA, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, ACC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "ABB, AAA, AAB, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, AAC, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "CCC, AAB, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, AAA, AAB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, ACC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "CCC, AAB, ABB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAA, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "ABB, AAA, AAB, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "CCC, AAB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, AAA, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "AAC, BBC, ABB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, BBC, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "CCC, AAA, AAB, ABB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "CCC, ABB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAA, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, AAB, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, CCC, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "CCC, AAB, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, AAA, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAA, AAB, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAB, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAA, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, ABB, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, BBB, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, AAA, ABB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAA, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC",
            "black constraint": "BCC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, ABB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, AAA, AAB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, AAA, AAB, BBB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, AAB, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, AAA, AAB, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "CCC, AAA, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAA, BBC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAB, AAA, CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BBB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, AAA, AAB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAC, ABB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BBB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "CCC, AAB, ABB, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, AAA, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAB, CCC, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAB, AAA, AAC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "AAA, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAA, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAB, BBC, AAC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAA, AAB, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, BBB, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, AAA, AAB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "ABB, AAA, CCC, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "ABB, CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAA, ACC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAA, BBC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "AAC, BBC, ABB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAB, AAA, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, AAA, AAB, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "CCC, AAA, AAB, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBB, ACC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, ABB, CCC, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, CCC, AAA, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "CCC, AAA, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, AAB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, ABB, BBB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, AAA",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, AAB, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "CC, BC",
            "black constraint": "BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "AAB, BBC, AAC, BBB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAB, ACC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, AAA, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, AAA, AAB, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "CCC, AAA, AAB, ABB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BCC, BBC, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "CCC, AAB, ABB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, AAC, BBB, AAB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "CCC, AAA, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, AAB, ABB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, CCC, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, BBB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, AAA, ABB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, AAA, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "ABB, AAB, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAA, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BCC, ACC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAA, BBC, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, AAA, AAB, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "AAA, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, CCC, BBB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, AAA, ABB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAA, BBC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, ABB, BBB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, AAB, ABB, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "CCC, AAB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "AAC, ABB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BCC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, CCC, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, AAA, AAB, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, CCC, AAB, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BBB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "ABB, AAB, AAA, CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBB, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "CCC, ABB, BBB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, CCC, AAA, AAB, BBB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, AAA, AAB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "ABB, AAA, CCC, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "CCC, AAA, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "CCC, AAB, ABB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, BBC, AAC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAB, CCC, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAB, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAA, BBB, AAB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, AAA, AAB, ABB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, ACC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ACC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, AAA, AAB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "ABB, AAB, CCC, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "AAA, BBC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "AAB, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAA, AAB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "ABB, AAB, CCC, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAA, AAB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, AAA",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBB, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, AAA, AAB, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAC, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, AAB, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BCC, BBC, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, ABB, BBB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAA, AAB, BBB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, AAB, ABB, BBB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BCC, AAA",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAB, CCC, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, CCC, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, AAA, AAC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, AAB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, ABB, BBB, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, AAA, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, AAA, AAC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, AAB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, AAB, ABB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "AAB, ACC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "CCC, AAA, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, AAA, AAB, BBB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, AAB, ABB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "AAA, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, CCC, AAA, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAA, BBC, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, AAB, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, AAA, AAB, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, AAB, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAC, BBB, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "ABB, AAB, AAA, CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, ABB, BBB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, CCC, AAA, ABB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, AAA, ABB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "CCC, AAB, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "CCC, AAB, BBB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, AAA, AAB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, ABB, CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, AAA, AAB, BBB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAB, AAC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "ABB, AAB, CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "AAA, BBC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BCC, BBC, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAB, BBC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAA, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BBB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "CCC, AAA, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "AAB, BBC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, AAA, AAB, BBB, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, AAA, AAB, ABB, BBB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "CCC, AAB, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "CCC, AAA, AAB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "CCC, AAB, ABB, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, BBC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "ABB, AAA, AAB, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BCC, ACC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAA, AAB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, ABB, BBB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BCC, AAA",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, BBC, AAA, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ACC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, AAA, AAB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "AAB, ABB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAA, CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "AAA, AAB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, ABB, AAA, CCC, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "AAA, AAB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, CCC, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, AAB, ABB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, AAA, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "AAC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "AAB, BBC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, AAB, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "AAB, ACC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "ABB, AAB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "CCC, AAA, AAB, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BCC, ABC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAB, BBC, AAC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "CCC, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BCC, AAB, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC",
            "black constraint": "BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "ABB, AAB, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, ACC, BBB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "CCC, AAA, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBB, ACC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, AAB, ABB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, CCC, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, CCC, AAB, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAA, CCC, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAA, ACC, ABC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, CCC, AAB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, AAA, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "CCC, AAA, ABB, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, AAB, ABB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "AAB, BBC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAB, ABB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "CCC, AAA, BBB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "AAB, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, AAB, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAC, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "AAC, BBC, ABB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "AAA, BBC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, AAA, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BCC, ACC, AAB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BCC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, CCC, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, CCC, AAB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAA, AAB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAB, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, ABB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BCC, ACC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, AAA, AAB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "AAB, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, BBC, AAC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "AAA, AAB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "AAA, AAB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, AAA, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAA, BBC, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, BBC, AAB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, BBB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "ABB, AAB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, AAB, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "CCC, AAB, ABB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BCC, AAB, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, BBB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, AAA, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BCC, AAC, AAB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAA, AAB, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAA, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BCC, BBC, AAA, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, ACC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAB, AAA, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, CCC, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, ABC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, BBB, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, AAC, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "ABB, AAA, AAB, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAA, ACC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "CCC, AAA, AAB, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAA, CCC, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, AAA, ABB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BCC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, CCC, AAA, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAB, ABB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "CCC, AAB, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, AAA, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, ABB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "ABB, AAA, CCC, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "AAB, BBC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "CCC, AAA, AAB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAB, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, BBC, AAA, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BCC, ACC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, AAA, AAB, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, CCC, AAB, ABB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "CCC, AAA, AAB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, CCC, AAB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, BBB, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "CCC, AAA, AAB, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, CCC, AAB, ABB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, AAA, AAB, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, AAC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, ABB, AAA, CCC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "CCC, AAA, ABB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "AAC, BBC, ABB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, CCC, AAA, AAB, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "AAC, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, BBB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "CCC, AAB, ABB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "CCC, AAB, ABB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAA, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "CCC, AAB, ABB, BBB, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BCC, AAB, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, BBB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, AAA, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAB, BBC, AAA",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAB, BBB, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAB, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "AAA, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ACC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAB, CCC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, AAA, AAB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, CCC, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BCC, BBC, AAA, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, ACC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "AAB, BBB, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ACC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAB, CCC, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, AAA, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, AAB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, AAA, AAB, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "AAC, BBC, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "AAA, BBB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "CCC, AAA, AAB, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BCC, BBC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, AAA, BBB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, AAA, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, CCC, AAA, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "ABB, AAA, CCC, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAA, AAB, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, AAA, ABB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, ABC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, AAA, ABB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, ABB, CCC, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, CCC, AAB, ABB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, AAA, ABB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "AAC, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAB, AAC, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, AAA, AAB, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBB, ABC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "CCC, AAB, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAA, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "ABB, AAA, CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, ABB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, CCC, AAA, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BCC, BBC, AAA, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "ABB, AAB, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, BBB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "CCC, AAA, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "ABB, AAB, CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, BBC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAA, CCC, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, BBB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, ABB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, ACC, AAB, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, AAA, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, CCC, ABB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAB, BBC, AAA",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAB, ABB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, AAA, ABB, BBB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, CCC, AAB, ABB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "ABB, AAB, AAA, CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, BBC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAB, ABB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "AAA, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "AAB, BBB, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "CCC, AAA, AAB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "AAB, BBC, ABC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAC, BBB, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAA, ABB, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAB, ABB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, AAA, AAB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, AAB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, BBB, ACC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAB, ABB, BBB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, AAB, ABB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "CCC, AAA, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, CCC, AAB, ABB, BBB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, CCC, AAA, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "CCC, AAA, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "CCC, AAA, AAB, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, AAA, ABB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAA, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAB, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAA, AAC, AAB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, CCC, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAA, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAA, BBC, ABC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, ABB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, AAC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BCC, BBC, AAA, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, AAA, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, ACC, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, AAA, ABB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBB, ABC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, AAA, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAA, CCC, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "CCC, AAB, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBB, ABC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, AAA, ABB, BBB, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, AAA, AAC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, AAA, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, CCC, AAA, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAB, AAA, CCC, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "CCC, AAA, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, AAA, AAC, AAB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "CCC, AAB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAB, CCC, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, AAA, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, AAA, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "AAB, BBB, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, AAA, ABB, BBB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "ABB, AAB, CCC, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "AAA, ACC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAB, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BCC, AAC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "CCC, AAB, ABB, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, AAA, AAB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAB, ABB, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, AAA, ABB, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, AAA, AAB, ABB, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, AAA, ABB, BBB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BBB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, ACC, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "ABB, AAB, AAA, CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "CCC, AAA, AAB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, AAB, ABB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, BBB, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, ABB, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "ABC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, CCC, AAA, ABB, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "CCC, AAB, ABB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "AAA, BBC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "CCC, AAA, AAB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, CCC, AAA, ABB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, AAB, ABB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BCC, BBC, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAA, BBC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, AAA, ABB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, ABB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBB, ACC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, CCC, AAA, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, AAA, BBB, AAB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, AAB, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, AAB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAB, AAA, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, AAA, ABB, BBB, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, AAB, ABB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "AAB, BBC, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, CCC, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, AAB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAB, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, AAA, ABB, BBB, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, BBC, ACC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAB, AAA, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAB, AAA, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "CCC, AAB, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, CCC, AAA, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, AAA, AAB, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, AAA, ABB, BBB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAB, AAC, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAC, BBB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAA, AAB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, AAB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BCC, AAA, AAC, AAB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BCC, AAC, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, BBB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, BBC, AAA",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, ACC, BBB, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, AAA, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, AAA, AAB, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBB, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BBB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAA, AAB, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, ABB, BBB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, ABB, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "CCC, AAB, ABB, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, CCC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, CCC, AAB, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, AAA, AAB, ABB, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "ABB, AAA, AAB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, AAB, ABB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BCC, AAA, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BCC, AAA, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAB, CCC, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAB, AAA, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "AAC, BBC, BBB, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, CCC, AAA, ABB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BCC, BBC, AAB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, CCC, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, AAA, AAB, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "CCC, AAA, AAB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, BC",
            "black constraint": "BCC, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBB, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "CCC, ABB, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAB, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, AAB, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, CCC, AAA, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "AAA, BBC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAB, BBC, AAA, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAA, CCC, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, AAB, ABB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, AAA, ABB, BBB, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAB, BBC, ABB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAA, BBC, BBB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, AAB, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAA, AAB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, BBC, AAA, BBB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "CCC, AAA, AAB, ABB, BBB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAB, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BCC, AAA, AAC, AAB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "ABB, AAB, CCC, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, ABB, CCC, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, AAB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, CCC, AAA, AAB, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, CCC, BBB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, CCC, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, AAA, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "ABB, AAA, CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "AAC, BBC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "CCC, AAB, ABB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAA, AAB, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, AAA, AAB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, ABB, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, CCC, AAB, ABB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAA, AAB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "ABB, AAB, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BCC, BBC, ACC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "ABB, AAA, AAB, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAA, BBC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, AAA, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, AAA, AAB, ABB, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBB, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "ABB, AAA, AAB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, ABB, BBB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, AAB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBB, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "CCC, AAB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAA, CCC, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, ABB, BBB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, ABB, CCC, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, AAA, ABB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, AAB, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, AAB, ABB, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, AAA, AAB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "AAA, BBC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "ABB, AAB, CCC, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "ABB, AAA, AAB, CCC, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAB, ABB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, CCC, AAB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBB, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAA, CCC, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAB, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAA, BBC, BBB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBB, ABC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAA, AAB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, CCC, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, AAA, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "ABB, AAA, AAB, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, AAA, AAB, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "ABB, AAB, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BCC, BBC, ACC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, AAA, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "ABB, AAA, AAB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "ABB, AAA, AAB, CCC, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAB, BBC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, ABB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, AAB, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "CCC, ABB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "ABB, AAA, AAB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, AAB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, AAB, BBB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "CCC, AAB, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, BBC, AAA, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BCC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "AAB, BBC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAA, BBB, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BCC, ACC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, CCC, AAB, ABB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, ACC, AAB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, ABB, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, ABC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, ABB, BBB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAB, CCC, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, AAB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "AAB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAB, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAB, AAC, ABB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, ABB, BBB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, ABB, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "AAA, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, AAB, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, AAB, ABB, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "ABB, AAB, CCC, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "ABB, AAB, CCC, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, BBB, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, AAB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BCC, AAB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "CCC, AAB, ABB, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, ABB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, BBB, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BCC, AAC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "ABB, CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, AAA, ABB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, AAB, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBB, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, ABB, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAB, ABB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, CCC, AAA, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, AAA, ACC, AAB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAA, BBC, BBB, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, AAA, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, CCC, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, CCC, AAB, ABB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, BC",
            "black constraint": "BCC, BBC, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "AAB, BBC, BBB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, AAC, ACC, AAB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "AAB, BBC, AAA, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, AAA, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, CCC, AAB, ABB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BCC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "AAC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "ABB, AAA, AAB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "CCC, AAA, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "CCC, AAA, ABB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "ABB, AAA, CCC, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "AAB, AAC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, AAA, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, AAA, BBB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, AAA, AAB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, ABB, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAA, AAB, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, AAC, AAB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, AAA, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, BBC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "AAB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, ACC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAA, BBC, ACC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBB, ABC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, ACC, AAB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, AAB, ABB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, BBC, AAA, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "ABB, AAA, AAB, CCC, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAA, BBB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, AAB, ABB, BBB, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAA, ABC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BBB, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BCC, ACC, AAB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "ABB, AAA, CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, BBB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAA, AAB, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, AAB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, AAB, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, AAB, ABB, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, AAA, AAB, ABB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAA, AAB, BBB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, BBB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "AAB, BBC, AAC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAB, AAA, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBB, ACC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, AAB, ABB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, CCC, AAB, ABB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "CCC, ABB, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, AAA, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "AAC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, AAA, ACC, AAB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "CCC, AAB, ABB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "CCC, ABB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, AAA, BBB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAC, BBC, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "ABB, AAA, CCC, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "CCC, AAB, ABB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, AAA, AAB, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BCC, AAA, ACC, AAB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "AAA, BBC, AAC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, AAB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAB, AAA, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, AAB, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, AAC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAB, ACC, ABB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, CCC, AAB, AAA, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "CCC, AAA, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, AAA, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, AAA, BBB, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BBB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAB, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, ACC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, ABB, AAB, CCC, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, AAB, BBB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAA, CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, BBC, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, AAA, AAB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "ABB, CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BCC, ACC, AAB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAB, CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, AAB, ABB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "AAA, BBB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, AAA, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "ABB, AAA, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAA, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "AAA, BBC, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBB, ABC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, AAC, AAB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAA, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAB, AAA, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAA, AAB, BBB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAA, CCC, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAB, ABB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAB, BBB, ACC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "ABB, AAB, CCC, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, BBC, AAA, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, BBB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, AAB, ABB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, BBB, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, CCC, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BCC, AAA, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAA, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "CCC, AAA, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, ABB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "CCC, AAA, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAB, CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, AAB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, AAA, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAA, AAB, BBB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BCC, ABC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BCC, AAB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, AAB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BCC, AAA, ACC, AAB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAB, BBC, AAA, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, AAA, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BCC, AAC, ACC, AAB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "AAA, BBC, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, BBC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAA, AAB, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, CCC, AAA, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, BBC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, CCC, AAB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "ABB, AAA, AAB, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, AAB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "CCC, AAB, ABB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, AAB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "CCC, AAA, AAB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, AAA, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BCC, BBB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, AAA, AAB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "AAB, BBB, ABC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "AAB, ACC, ABB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "AAB, AAA, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BCC, AAA, AAB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, BBC, AAB, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, AAB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, AAB, ABB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, AAA, ABB, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, CCC, AAB, AAA, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, ABB, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "ABB, AAA, CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ACC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "CCC, AAB, ABB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "ABB, AAB, CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ACC, ABB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "ACC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, AAB, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAA, ACC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAA, BBC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BCC, AAB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, AAA, AAB, ABB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "ABB, AAA, CCC, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, AAC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "AAA, BBC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, BBB, ABC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "CCC, AAA, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "CCC, AAA, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAB, BBC, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBB, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAC, BBC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, CCC, AAB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAA, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, AAB, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, AAA, AAB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, AAA, ABB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAA, AAC, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, AAA, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAA, AAC, AAB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "ABB, AAB, CCC, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAA, AAB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, CCC, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, CCC, ABB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "AAB, ACC, ABB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAB, AAA, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAA, AAB, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "AAA, BBC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, AAA, AAB, BBB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BCC, AAB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "ABB, AAA, CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, AAA, ABB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "ABB, AAB, CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "ABC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAA, AAB, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, BBC, AAB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "ABB, AAB, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "ABB, AAA, CCC, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAA, ABB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, BBC, AAC, BBB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAA, AAC, BBB, AAB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, BBC, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, ABB, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BCC, BBC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, AAC, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, AAC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, AAB, ABB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "AAC, BBC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, AAC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, AAB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, CCC, ABB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "AAA, ACC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "AAC, ACC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, CCC, AAB, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, AAA, AAB, ABB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, AAA, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, AAA, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, AAA, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, CCC, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, BBB, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, AAC, BBB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBB, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, CCC, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, CCC, AAA, AAB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, AAA, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, AAB, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "AAC, BBC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BCC, AAA, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BCC, AAA, AAB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BCC, ACC, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAB, BBB, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAA, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "CCC, AAB, ABB, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAB, BBC, ABC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, AAA, AAB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAA, AAB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAC, BBC, ACC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAB, AAA, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAA, CCC, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, BBB, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "ABB, AAB, CCC, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "AAC, AAA, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAB, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAA, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, BBB, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, CCC, AAB, ABB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, AAA, AAB, BBB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAB, BBC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "AAA, BBC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAB, CCC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "AAB, AAA, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAB, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, CCC, AAA, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAA, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, AAC, AAB, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, AAA, ABB, BBB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "ABB, AAA, CCC, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "CCC, AAA, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, AAA, AAB, BBB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, AAA, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, AAB, ABB, BBB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAB, CCC, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, BBC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, ABB, AAB, CCC, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, AAB, ABB, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, AAA, AAB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "CCC, AAA, ABB, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAA, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "ABB, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAA, AAC, BBB, AAB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, AAA, AAB, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, BBC, AAB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "AAA, ACC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAA, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, AAA, AAB, ABB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, AAC, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAA, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAC, ACC, ABB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BCC, AAC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, CCC, AAA, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, ABB, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, ABB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BCC, AAC, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "CCC, ABB, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "AAA, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "AAC, BBC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAC, BBC, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, BBC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "CCC, ABB, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, CCC, AAB, AAA, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, AAA, AAB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, AAA, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, AAA, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAA, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BCC, AAB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, AAA, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "CCC, AAB, ABB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, BBB, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "AAB, AAA, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "AAA, BBB, ABC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, BBB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "CCC, AAB, ABB, BBB, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, BBB, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, AAB, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAB, AAA, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAA, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, BBB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAB, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "AAA, AAB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAB, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, AAA, AAB, BBB, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BCC, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, AAB, AAA, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "BCC, AAC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BCC, BBB, AAB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "AAA, BBC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, CCC, AAB, ABB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "AAA, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, ABB, BBB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "AAB, AAC, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, CCC, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "AAA, BBC, AAC, BBB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, CCC, ABB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BCC, AAC, AAB, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, BBB, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "ABB, AAA, CCC, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, AAA, AAB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, CCC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "ABB, AAB, CCC, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BCC, BBC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, CCC, ABB, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BCC, AAC, ACC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, AAB, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, CCC, AAB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "CCC, AAA, AAB, ABB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAB, AAA, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "CCC, AAB, BBB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, AAA, ACC, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAA, BBC, AAC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, AAC, BBB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "ABC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAA, AAB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, AAB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BBC, ABB, AAB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAB, AAC, BCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, BBC, ACC, BBB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, CCC, AAB, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, CCC, AAA, AAB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "CCC, AAA, BBB, AAC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "CCC, AAB, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "CCC, AAA, ABB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, AAC, ABC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, CCC, BBB, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAA, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "BBC, AAA, AAC, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "CCC, AAA, AAB, BBB, BCC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "AAC, ABC, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, BBB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "ABB, AAA, AAB, BBB, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BCC, AAB, CCC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAB, AAA, CCC, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BBB, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "AAA, AAB, AAC, BCC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, BBB, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, BBB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "BCC, ACC, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "CCC, AAB, BBB, AAC, ACC, ABC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, AAC, BCC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, CCC, AAA, AAC, ACC",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "AAA, CCC, ABB",
            "complexity": "constant",
            "complexity upper bound": 1000
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, BBB, AAC",
            "complexity": "constant",
            "complexity upper bound": 1000
        }
    ],
    "iterated_logarithmic": [
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, AAA, BBB, AAC, BCC",
            "complexity": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAA, BBB, BCC",
            "complexity": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, BBC, AAA, BBB",
            "complexity": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBB, ACC",
            "complexity": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAA, BBB, AAC, BCC",
            "complexity": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAA, AAC, BBB, ACC",
            "complexity": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAB, BBB, ACC",
            "complexity": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAA, BBB, ACC",
            "complexity": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAB, AAC, BBB, ACC",
            "complexity": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAB, AAA, BBB, ACC",
            "complexity": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "CCC, AAA, BBB, BCC, ACC",
            "complexity": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAA, AAB, BBB, AAC, ACC",
            "complexity": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAC, BBB, ACC",
            "complexity": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BCC, AAA, BBB, CCC",
            "complexity": "iterated_logarithmic"
        }
    ],
    "logarithmic": [
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, AAC, BBB, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, CCC, BCC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, BBB, BCC, ACC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "CCC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "AAC, BBC, ABC, CCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, BBC, BBB, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, BBB, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "AAB, BBC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, BBB, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "AAA, BBB, CCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, BBB, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, AAB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "AAC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "ABB, AAA, AAB, BBB, AAC, BCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAC, ACC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAB, BBB, BCC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, BBC, AAB, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, BBC, BBB, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAA, BBB, AAC, BCC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "ABB, AAA, AAB, BBB, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, CCC, AAC, BCC, ACC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, AAA, AAB, BBB, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, BBB, ABC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "ABB, AAA, BBB, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "AAC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "CCC, AAA, AAB, ABB, BCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BCC, BBC, BBB, AAB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAB, AAC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAB, AAC, BBB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "ABB, AAA, AAC, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, BBB, AAC, BCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, AAA, AAC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, BBC, AAB, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BCC, BBC, AAC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "AAB, BBC, ABC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, BBC, AAA, AAC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAA, AAC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "AAA, BBB, AAC, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "AAA, BBB, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "AAA, AAB, BBB, AAC, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAB, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BBB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, BBC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, AAC, AAB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "ABB, AAA, AAB, BBB, BCC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, BBC, AAC, BBB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBB, ABC, CCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, BBC, AAC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, AAA, AAC, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BCC, ABC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, AAB, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, AAB, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BCC, BBB, AAB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAB, BBB, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, AAC, AAB, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "BC",
            "black constraint": "BBC, CCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, AAA, AAB, BCC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAA, BBB, BCC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, BBB, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "AAB, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, BBC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, CCC, BBB, AAC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BCC, BBC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "CCC, AAA, AAB, BBB, BCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, BBC, ABC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, BBB, BCC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, AAB, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, AAB, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, BBC, BBB, AAB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "AAA, AAB, BBB, AAC, BCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "AAC, BBC, ABB, CCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "AAB, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, AAA, AAB, BCC, ACC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAA, AAC, ACC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "ABB, AAB, BCC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, AAB, BBB, AAC, BCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "CC, BC",
            "black constraint": "BCC, BBC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, BBB, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BCC, BBC, AAC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "ABB, AAA, AAB, BBB, AAC, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "AAA, BBB, BCC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "CCC, AAB, BBB, BCC, ACC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, BBB, BCC, ACC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAB, ABC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "ABB, BBB, AAC, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAB, AAA, ABC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "AAA, AAB, BBB, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "ABB, AAA, BBB, BCC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAB, BBB, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "ABB, AAB, BBB, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, BCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAC, BCC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, AAA, BBB, BCC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, AAA, BBB, AAC, BCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, AAC, BBB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, AAA, AAB, BBB, BCC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, BBC, AAC, AAB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAB, AAC, ABC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, BBC, AAC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, AAC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BCC, ACC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "ABC, CCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAA, BCC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, ACC, ABC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, BBB, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAB, ACC, ABC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, AAA",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAC, BBC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "AAA, BBC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, AAB, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "CCC, AAB, ABB, BBB, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "ABB, BBB, BCC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAC, AAB, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BCC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, ABC, CCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAB, BBB, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, BBC, AAC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAB, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, ACC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAB, BBC, BBB, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "AAB, BBC, BBB, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, BBB, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, BBB, AAC, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, AAB, CCC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, AAB, BBB, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, BBB, AAC, BCC, ACC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, AAB, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, AAC, BCC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, AAB, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, BBB, ABC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "AAC, AAB, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAB, BBB, AAC, BCC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "AAC, BBC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, ABC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, BBB, AAC, BCC, ACC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, BBC, AAA, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAA, ACC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAB, AAA, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, BBB, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, BBC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, AAA, BBB, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, AAB, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, CCC, AAB, ABB, AAC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, AAC, BCC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, AAA, ACC, BBB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "AAC, AAB, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, AAA, AAB, BBB, BCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, BBB, ABC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, AAB, ABC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ACC, ABC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, AAB, BBB, AAC, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "AAA, ACC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "AAB, AAA, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, AAB, BBB, AAC, BCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAA, AAB, AAC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, BBB, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, BBB, BCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "AAB, ABC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, AAA, AAB, BBB, AAC, BCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, AAA, ACC, BBB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAB, BBB, BCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, AAA, BBB, AAC, BCC, ACC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAB, BBB, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "AAB, BBB, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAB, ACC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAB, AAC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, AAB, AAC, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, BBB, AAC, BCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, AAA, AAC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "ACC, ABC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, AAA, BBB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAC, ACC, ABC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAA, AAB, AAC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "AAC, BBC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBB, ABC, CCC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, BBB, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, BBB, BCC, ACC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "CC, BC",
            "black constraint": "BCC, BBC, BBB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAA, ACC, ABC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, AAC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "ABB, AAB, CCC, BBB, BCC, ACC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAB, ACC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAA, AAB, AAC, ACC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BCC, BBC, ACC, CCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "AAB, BBC, BBB, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAA, BBB, AAC, BCC, ACC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, BBC, AAA, AAC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BCC, BBC, ABC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "ACC, ABC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "AAB, ACC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "CCC, AAB, ABB, BCC, ACC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, BBC, BBB, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAC, ACC, ABC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, AAA, BBB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "AAB, BBC, BBB, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, BBB, AAC, BCC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, AAC, BCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, BBC, BBB, AAB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BCC, AAA, CCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "AAA, AAB, BBB, AAC, BCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "AAA, ACC, ABC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, CCC, AAC, BCC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, BBC, AAA",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "AAB, ACC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, BBB, BCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, AAA, AAB, BCC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, BBB, BCC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "AAC, ACC, ABC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, AAB, BBB, AAC, BCC, ACC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "AAC, BBC, CCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, BBC, ACC, BBB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, AAB, BBB, BCC, ACC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, BBC, BBB, AAB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "ABB, AAA, AAB, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "AAA, AAB, BBB, AAC, BCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ACC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, CCC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "ABB, AAA, AAB, AAC, BCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAB, BBC, BBB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "AAA, BBC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAA, AAC, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAB, BBB, AAC, BCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, AAB, BBB, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BCC, AAC, ABC, CCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, BBB, AAB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BCC, BBC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "ACC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "ABB, AAA, BBB, BCC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, BBB, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "CCC, AAB, ABB, BBB, BCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, BBB, CCC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBB, ABC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, AAA, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, CCC, AAB, ABB, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAB, BBC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "AAB, BBB, AAC, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "CCC, AAA, BBB, BCC, ACC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, CCC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, AAA, BCC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "ACC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, AAA, AAB, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BCC, AAB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, BBB, AAB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, AAB, BBB, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAB, BBB, ABC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, BBB, BCC, ACC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "BC",
            "black constraint": "BCC, BBC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, AAA, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, BCC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAC, BBB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAB, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAA, AAC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAA, AAB, AAC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BCC, ABC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, AAB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BCC, BBC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "AAC, BBC, BBB, CCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, BBC, AAB, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "ABB, AAA, AAB, BBB, AAC, BCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "AAA, AAC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAC, ABC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BCC, BBC, AAC, ACC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "ABB, AAA, AAB, AAC, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, BBC, BBB, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "AAA, BBC, BBB, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, AAB, BBB, AAC, BCC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "ABB, AAA, BBB, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BCC, BBB, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, BCC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "ABC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAC, AAA, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, AAB, ABC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, BBC, AAB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAB, AAC, ACC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, AAA, AAC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, BBB, AAC, BCC, ACC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAA, AAC, ACC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, BBC, AAB, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAA, AAC, BBB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, BBC, ABC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, BBC, ABC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, BBB, AAC, BCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAA, BBC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, AAB, ABC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BCC, BBC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "AAA, AAB, BBB, AAC, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, AAA, AAB, BBB, AAC, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAB, BBB, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, BBB, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAB, AAC, ABC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, AAC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "AAC, BBC, ABC, CCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, AAA, AAC, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, BBB, BCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, BBC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, AAA, BBB, AAC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, AAA, ABC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, AAC, AAB, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "CC, BC",
            "black constraint": "BCC, BBB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, AAC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAB, ACC, ABC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "ABB, AAB, BBB, AAC, BCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, ACC, BBB, AAB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BCC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, AAC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, BBB, AAC, BCC, ACC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, BBC, AAA",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAC, BCC, ACC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, AAA, BBB, AAC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, BBB, AAB, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, BBC, BBB, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, BCC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "ABB, AAB, BCC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAB, AAC, ACC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BCC, BBC, AAC, AAB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, BBB, AAC, BCC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, BBB, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, ACC, BBB, AAB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, AAB, CCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "AAA, BBC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, BBB, BCC, ACC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, BBC, AAA",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAB, BBB, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "AAC, BBC, BBB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "AAC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, BCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, AAA, AAB, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, AAB, BBB, BCC, ACC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "AAB, AAC, ACC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, BBC, AAA, BBB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, AAA, BBB, AAC, BCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, AAB, BBB, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABC, CCC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, AAB, BBB, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, BBC, ABC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "ABB, AAA, AAB, BBB, BCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, BBC, AAC, AAB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, BBB, AAC, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "AAC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BCC, BBC, AAC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, ABC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, ACC, ABC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "AAB, AAC, ACC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, ABC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, AAA, AAB, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, AAC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, BBB, AAC, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, BBC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, BBB, AAC, BCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, AAC, BBB, AAB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, BBC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAA, AAB, AAC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, BBB, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, AAB, BBB, BCC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BCC, AAB, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "ABB, BBB, BCC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAC, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, BBC, ACC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BCC, BBC, AAB, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, BBB, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAA, BBB, AAC, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, AAC, BBB, AAB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, BBB, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "AAA, AAB, AAC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAA, AAB, AAC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, AAC, BCC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "ABB, AAA, BBB, AAC, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, BBB, AAC, BCC, ACC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAC, BCC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAA, BBC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAB, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, AAB, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, AAA, BBB, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAB, BBB, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAC, ACC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, BBB, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, ACC, BBB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "ABB, AAA, BBB, AAC, BCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, ACC, BBB, CCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "ABB, AAA, AAB, AAC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, AAB, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, AAC, BCC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAB, ACC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, AAA, AAB, BBB, BCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, BBC, AAB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, BBB, ABC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "CCC, AAA, ABB, BBB, BCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BCC, BBC, AAC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, AAA, BBB, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "AAC, ACC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABC, CCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BCC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "ABB, AAB, BBB, AAC, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, ACC, BBB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, AAB, BBB, AAC, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, AAB, BBB, AAC, BCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, AAB, BBB, AAC, BCC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, AAB, BBB, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAA, AAB, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, AAA, ACC, BBB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, BCC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, BBC, AAB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "AAC, ACC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAC, BBB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "ABC, CCC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "ABB, AAB, BBB, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, ABC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BCC, BBC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAB, BBC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, AAA, BBB, AAC, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "AAB, BBC, AAA, CCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "ABB, AAB, BBB, BCC, ACC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BCC, ABC, CCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, AAB, BBB, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, ACC, AAB, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAB, AAA, ABC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAA, BBB, BCC, ACC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAA, BCC, ACC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, BBC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAB, AAA, ACC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAB, AAA, ACC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "AAB, BBC, BBB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "ABB, AAA, CCC, BBB, BCC, ACC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAA, AAC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, ABC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, AAC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAA, BBC, BBB, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, AAA, BBB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, AAC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, AAA, AAB, BBB, AAC, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "ABB, AAB, BBB, BCC, ACC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, BBC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, ACC, AAB, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, AAC, BCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAB, BBC, BBB, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, BBB, BCC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAB, BBB, BCC, ACC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, BBC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, CCC, ABB, BBB, AAC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "AAB, AAA, ACC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "AAC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, BBB, BCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBB, ABC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "ABB, AAA, AAC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBB, ABC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, CCC, ABB, BBB, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, AAA, BBB, AAB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAC, BCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, AAC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, AAB, BBB, AAC, BCC, ACC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "AAB, BBC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, BBC, ACC, BBB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, AAC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAA, AAB, AAC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, BBC, BBB, AAB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, BBB, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, ACC, BBB, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, AAA, AAC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, ACC, CCC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, BBB, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAC, BCC, ACC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "ABB, AAA, AAB, AAC, BCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, CCC, AAA, BBB, AAC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "AAC, BBC, BBB, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAC, BCC, ACC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAB, BBB, ABC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "AAB, BBB, ABC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, AAA, BBB, AAB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, AAC, CCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAB, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, BBB, AAC, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, ACC, ABC, CCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, AAA, AAC, AAB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, BBB, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, ACC, BBB, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, AAC, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, AAA, BBB, BCC, ACC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAC, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, ACC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAB, AAA, AAC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAA, BBB, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAA, ACC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, BBC, AAB, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAB, AAA, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, BBC, AAB, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, BBC, BBB, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, BCC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, AAA, AAB, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "AAA, AAB, AAC, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAA, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, BBB, AAB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, BBB, AAC, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "AAB, BBC, BBB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, ACC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ACC, ABC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, BBC, AAB, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, AAA, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAB, AAC, ACC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, BBC, AAB, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "ABB, AAA, AAB, BBB, BCC, ACC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, BBC, ACC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, BBC, ACC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, BBB, ABC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, BBB, AAC, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, BBC, AAA, AAB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "AAB, ABC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, AAA, BBB, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBB, ABC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, BBC, AAC, BBB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "AAB, BBC, ABC, CCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAA, BBB, BCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "AAB, BBC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, AAA, AAB, AAC, BCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, BBC, ACC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "ABB, AAA, AAB, AAC, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, AAC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, BBB, BCC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, BBC, ABC, CCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "AAB, BBB, ABC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, BBC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, AAA, BBB, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, BBC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, BBB, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, AAC, BBB, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, AAA, BBB, AAC, BCC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "ABB, AAA, BBB, AAC, BCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, BBB, ABC, CCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, AAC, AAB, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, BBC, AAA, ACC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, AAB, BCC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, AAA, AAB, AAC, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, AAB, ABC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, CCC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, BBB, AAC, BCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, BBB, AAB, CCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, AAA, AAB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, BBC, AAB, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "ABB, AAB, BBB, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, BBB, AAB, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, AAA, AAC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, BBB, AAB, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAB, AAC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAB, BCC, ACC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ACC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, AAA, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, AAC, BBB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, BBB, BCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, BBB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, AAA, AAB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, BBC, AAB, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, AAA, ABC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "ABB, AAB, BBB, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BCC, AAB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, CCC, AAB, ABB, BBB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "ABB, AAB, AAC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, CCC, AAA, ABB, BBB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, BBC, AAC, AAB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, AAA, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, AAC, BBB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, AAA, BBB, CCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "ABB, AAB, BBB, AAC, BCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, BCC, ACC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBB, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "AAA, BBC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAB, BBB, AAC, BCC, ACC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "AAA, BBC, AAC, BBB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, BBC, BBB, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "ABB, AAB, AAC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, AAA, BBB, AAC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAB, BCC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAA, ABC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, BBB, CCC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "AAC, ACC, ABC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, BCC, ACC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, ACC, BBB, AAB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, BBB, BCC, ACC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, BBB, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, BBB, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAC, BCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, AAC, ABC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "AAB, BBC, ABB, CCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, BBC, AAA, BBB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "ABB, AAA, AAB, BBB, BCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAB, AAA, ACC, AAC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAB, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAC, ABC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, AAB, BBB, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, BBC, AAC, CCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAA, BBC, BBB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, BBB, AAB, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, BBB, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, BBB, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "ABB, AAA, BBB, BCC, ACC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, AAA, AAB, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, CCC, AAC, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, BBB, AAC, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAA, BBB, AAC, BCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, AAC, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, BBB, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, BBC, ABC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, AAA, CCC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, BBB, ABC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, AAA, BBB, BCC, ACC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, AAB, BBB, BCC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, BBB, ABC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "AAB, AAA, ACC, AAC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "AAB, BBB, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, BBB, AAB, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, BCC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "AAB, BBB, BCC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAC, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "BC",
            "black constraint": "BCC, BBB, CCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, AAC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, AAC, BBB, AAB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, BBC, AAC, ACC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, AAA, AAB, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "AAA, AAB, AAC, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "ABB, AAA, BBB, AAC, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAC, BCC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, BBC, AAA, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAB, AAA, AAC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAB, BBC, AAC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAA, AAC, ABC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAB, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "AAB, BBC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, AAB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAB, ABC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, BBC, AAC, ACC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, BBC, AAA, AAB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "AAB, ABC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "CC, BC",
            "black constraint": "BCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, BBC, ACC, AAB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, CCC, AAC, BCC, ACC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, AAC, AAB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "AAA, BBC, CCC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, BBC, BBB, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "AAB, ABB, ABC, CCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "BB, CC",
            "black constraint": "BCC, BBC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, BBB, BCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, AAA, AAB, AAC, BCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, AAA, BBB, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAB, BBC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "ABB, AAB, BBB, AAC, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, ACC, BBB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "CCC, AAA, ABB, BBB, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, AAA, AAB, BBB, BCC, ACC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "AAA, BBC, CCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, BBC, AAB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "AAB, BBC, BBB, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "AAA, BBC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, BBB, BCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, BBC, AAB, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BCC, ABC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, BBB, AAC, BCC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "ABB, AAB, BBB, BCC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, AAC, BBB, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "ABB, AAB, AAC, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, BBB, AAC, BCC, ACC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, BBB, ABC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, AAA, BBB, AAC, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAA, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, BBC, BBB, AAB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, BBC, BBB, AAB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "BB, CC",
            "black constraint": "BCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, AAB, BBB, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, AAA, AAB, AAC, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAB, AAC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BCC, BBC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAC, AAB, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BCC, BBC, ACC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, AAC, BBB, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BCC, AAC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, AAA, AAC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAA, AAC, BBB, AAB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBB, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, BCC, ACC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, ABC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BCC, BBC, BBB, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAB, AAA, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "AAA, AAC, ACC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BCC, AAB, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "ABB, AAB, BBB, BCC, ACC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAA, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, BBC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAB, BBC, ABC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, CCC, BCC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, ACC, AAB, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, BBB, BCC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAA, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, BBC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, BBB, BCC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BCC, ACC, BBB, CCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, BBB, AAC, BCC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "ABB, AAA, AAB, BBB, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, AAC, BCC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAA, AAC, BCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, AAA, AAB, BBB, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, AAC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, BBC, AAC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "AAB, BBC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, BBB, AAB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, BBB, AAB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, BBB, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, AAA, AAC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, ABC, CCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "AAA, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAB, AAC, BCC, ACC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "ABB, AAA, AAC, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ACC, ABC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, AAC, AAB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, AAA, BBB, AAB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "AAB, BBC, BBB, CCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BCC, AAB, BBB, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, BBB, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "AAA, BBC, BBB, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, BBC, AAC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, BBB, AAC, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, BCC, ACC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, ACC, BBB, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BBB, AAC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BCC, ACC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "AAA, BBB, AAC, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAB, ACC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BCC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAB, AAC, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAC, ACC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAB, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, AAC, AAB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BCC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "ABB, AAA, BBB, BCC, ACC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAA, AAC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, BBC, AAC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "ABC, CCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, AAA, AAC, AAB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, ACC, BBB, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAB, AAC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, CCC, AAA, ABB, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAB, AAC, BBB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "AAA, BBC, ABC, CCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BCC, BBC, ACC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "ABB, AAA, AAB, BBB, BCC, ACC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "ABB, AAA, BBB, BCC, ACC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAA, AAB, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "AAB, BBC, CCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, BBC, ACC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAB, BBB, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAB, BBB, AAC, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, BBC, ABC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "AAC, BBC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, AAB, ABC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, AAB, ABC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BCC, AAB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, AAA, AAB, BCC, ACC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, BBB, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "ABB, AAA, AAB, BBB, AAC, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "BC",
            "black constraint": "BCC, BBC, CCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "AAA, BBB, BCC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, BBC, AAC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ACC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BCC, BBC, BBB, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, BBB, BCC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAB, AAA, ACC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAB, BBB, BCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, BBB, BCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "ABB, BBB, AAC, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, BBC, AAA, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "AAA, AAB, BBB, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, AAB, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAA, AAC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BCC, AAC, CCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, BBB, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BCC, ACC, ABC, CCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAB, ACC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, AAA, BBB, BCC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABB, AAA, AAB, AAC, ACC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BCC, BBC, AAB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, AAA",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "AAA, BBB, ABC, CCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, AAA, BBB, AAC, BCC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, AAC, AAB, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAA, ABC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, BBC, AAA, ACC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BCC, BBC, AAB, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, AAB, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, BBC, AAC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, AAB, BCC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "ABC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, BBB, ABC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, BBB, ABC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "AAA, BBC, BBB, CCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBB, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBB, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, BBC, BBB, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, ACC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, BBC, BBB, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "ABB, AAA, AAB, AAC, ACC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, AAA",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, AAA, AAB, BBB, BCC, ACC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "ABC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAB, BBB, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, BBC, AAC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, ACC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, BBC, AAA, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, AAA, AAB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, BBC, AAB, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "ABB, AAB, AAC, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, BBC, ACC, CCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAB, ABC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, AAA, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, AAC, BBB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, AAC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAC, BBC, BBB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, BBB, AAC, BCC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAC, ABC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, AAB, BBB, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, AAB, BBB, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, BBC, AAA, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, AAA, CCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, CCC, AAC, BCC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "AAA, BBC, BBB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BCC, BBC, ABC, CCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, AAA, BBB, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "AAC, BBC, CCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAB, BBB, BCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, BBB, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "AAB, BBC, AAA",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAB, BBC, BBB, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, CCC, BBB, AAC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "ABB, AAA, AAB, BBB, BCC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, BBC, AAC, BBB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAB, BBC, AAC, BBB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAB, AAC, BCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, AAC, BBB, AAB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAB, AAA, AAC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, AAC, ABC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAA, AAC, ABC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAB, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, BBB, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, AAA, AAB, BBB, AAC, BCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, AAA, BBB, AAC, BCC, ACC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAC, AAB, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBB, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAB, AAC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, AAB, AAC, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, AAC, ABC, CCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, BBC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "AAB, AAA, AAC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAB, AAC, ABC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, BBB, BCC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, AAB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, AAB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "ABC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, BBB, AAC, BCC, ACC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "AAB, AAC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "CCC, ABB, BBB, BCC, ACC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAC, AAA, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, BBC, BBB, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, BBB, AAB, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAB, AAC, ACC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAB, ACC, ABC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAB, BBC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "AAB, BBB, BCC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "AAB, BBC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, BBB, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, BBB, AAB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, BBB, AAC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BCC, BBC, AAC, ACC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, AAA, AAC, AAB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, AAC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAA, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, AAA, AAB, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, ACC, BBB, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, BBC, AAB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAB, AAC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, BBC, AAB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAB, AAC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, AAB, BBB, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAB, AAC, BCC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "AAC, AAA, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BCC, AAB, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "AAA, BBC, BBB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAB, AAC, ACC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BBB, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, BBB, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "AAB, AAC, ACC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAB, AAA, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, AAA, AAB, BBB, BCC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, BBB, ABC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "ABB, AAA, AAB, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BCC, BBB, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "AAA, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, BBC, AAC, ACC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAB, AAC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAC, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, BBC, ACC, AAB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "AAB, AAC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, BBB, AAC, BCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "AAB, BBB, ABC, CCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BCC, AAB, BBB, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAC, ACC, ABC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "AAB, AAC, ACC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BCC, BBB, ABC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAA, ACC, ABC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BCC, BBC, AAC, CCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "AAB, AAC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, CCC, ABB, AAC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAB, BBC, ABC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "AAB, BBC, ABC, ABB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, CCC, AAC, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, AAA, AAB, CCC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "AAB, BBB, AAC, BCC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, AAC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, CCC, AAB, BBB, AAC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, AAC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, BBB, AAC, BCC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "ABB, AAB, BBB, BCC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, AAA, BCC, ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, BBB, AAC, BCC, ACC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, AAB",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "ACC, ABC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, BBB, BCC, ACC",
            "complexity": "logarithmic"
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAC, ACC, ABC",
            "complexity": "logarithmic"
        }
    ],
    "global": [
        {
            "white constraint": "AC, BC",
            "black constraint": "AAA, BBC",
            "complexity": "global"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "ABB, AAA, AAB, BBB, ABC",
            "complexity": "global"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "AAB, BBC, ABC",
            "complexity": "global"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, BBB, AAC, ABC",
            "complexity": "global"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, BBB, ABC",
            "complexity": "global"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, BBB, ABC, ABB",
            "complexity": "global"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "AAB, BBC, ABB",
            "complexity": "global"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "AAA, BBC, BBB, ABB",
            "complexity": "global"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "AAB, BBC, ABC, ABB",
            "complexity": "global"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "AAB, BBC, BBB, ABB",
            "complexity": "global"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "AAA, BBB, ABC",
            "complexity": "global"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABC",
            "complexity": "global"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, AAA, BBB, AAC, ABC",
            "complexity": "global"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "AAC, BBC, BBB, ABC",
            "complexity": "global"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, BBB, AAC",
            "complexity": "global"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "AAA, BBC, BBB, ABC",
            "complexity": "global"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, BBB, AAC",
            "complexity": "global"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "AAC, BBC, ABB",
            "complexity": "global"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "AAB, BBC, AAA, ABC",
            "complexity": "global"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB",
            "complexity": "global"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB",
            "complexity": "global"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "AAB, BBC, AAC, ABB",
            "complexity": "global"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "AAB, CCC, ABB",
            "complexity": "global"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BCC, ACC",
            "complexity": "global"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAA, AAC, AAB",
            "complexity": "global"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, BBB, ABC",
            "complexity": "global"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABC, ABB",
            "complexity": "global"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "AAC, BBC, ABC",
            "complexity": "global"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "AAB, BBC, AAA",
            "complexity": "global"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "AAB, ABC, ABB",
            "complexity": "global"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBB, ABC",
            "complexity": "global"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "AAC, BBC, ABC, ABB",
            "complexity": "global"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "AAC, BBC",
            "complexity": "global"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "AAB, BBC, AAA, BBB",
            "complexity": "global"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "ABC, ABB",
            "complexity": "global"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "AAB, BBC, BBB, ABB",
            "complexity": "global"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "AAB, BBC, BBB, ABC",
            "complexity": "global"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, AAA, BBB, AAC, ABC",
            "complexity": "global"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBB, CCC, ABB",
            "complexity": "global"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "AAA, BBC, BBB",
            "complexity": "global"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAC, ABC",
            "complexity": "global"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "AAB, BBC, AAC, BBB",
            "complexity": "global"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, AAB, BBB, AAC, ABC",
            "complexity": "global"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, BBB, AAC, ABC",
            "complexity": "global"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "AAB, BBC, ABC",
            "complexity": "global"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, BBB, ABB",
            "complexity": "global"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, BBB, ABC",
            "complexity": "global"
        },
        {
            "white constraint": "BC",
            "black constraint": "BCC, CCC",
            "complexity": "global"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, BBB, ABC, ABB",
            "complexity": "global"
        },
        {
            "white constraint": "CC, BC",
            "black constraint": "BBC",
            "complexity": "global"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "AAB, BBC, ABC, ABB",
            "complexity": "global"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "AAA, BBB, ABC",
            "complexity": "global"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABC",
            "complexity": "global"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, BBB",
            "complexity": "global"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, BBB, AAC",
            "complexity": "global"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "AAC, BBC, ABC, ABB",
            "complexity": "global"
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAA, AAC, AAB",
            "complexity": "global"
        },
        {
            "white constraint": "BC",
            "black constraint": "BBB, CCC",
            "complexity": "global"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAB, BBB, AAC",
            "complexity": "global"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, BBB, AAC, ABC",
            "complexity": "global"
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "AAA, AAC, AAB",
            "complexity": "global"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "CCC, AAA, AAB, ABB, BBB",
            "complexity": "global"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "AAA, BBC, ABC",
            "complexity": "global"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "AAC, BBC, BBB",
            "complexity": "global"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, AAA, AAB, BBB, ABC",
            "complexity": "global"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, ABC",
            "complexity": "global"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, BBB, ABC",
            "complexity": "global"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, BBB, ABB",
            "complexity": "global"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB",
            "complexity": "global"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABC, ABB",
            "complexity": "global"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "AAC, BBC, ABC",
            "complexity": "global"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, ACC, CCC",
            "complexity": "global"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "AAB, ABC, ABB",
            "complexity": "global"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB",
            "complexity": "global"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "ABC",
            "complexity": "global"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "AAC, BBC",
            "complexity": "global"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "AAA, BBB, CCC, ABB",
            "complexity": "global"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "AAB, BBC, AAA, BBB",
            "complexity": "global"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "AAB, BBC, BBB, ABC",
            "complexity": "global"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "AAC, BBC, BBB, ABB",
            "complexity": "global"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "AAA, BBC, ABC, ABB",
            "complexity": "global"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAB, AAC, ABC",
            "complexity": "global"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, BBB, ABB",
            "complexity": "global"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, BBB, ABB",
            "complexity": "global"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, AAA, AAB, BBB, ABC",
            "complexity": "global"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, AAB, BBB, AAC, ABC",
            "complexity": "global"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAA, BBB, ABC",
            "complexity": "global"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "AAB, BBC, BBB",
            "complexity": "global"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "AAB, BBC, AAA, ABB",
            "complexity": "global"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, BBB, AAC",
            "complexity": "global"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, BBB, AAC, ABC",
            "complexity": "global"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBB, ABC, ABB",
            "complexity": "global"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "AAB, BBB, CCC",
            "complexity": "global"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "AAB, BBB, ABC, ABB",
            "complexity": "global"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, BBB, ABB",
            "complexity": "global"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB",
            "complexity": "global"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, BBB",
            "complexity": "global"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, BBB, ABB",
            "complexity": "global"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB",
            "complexity": "global"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, BBB, AAC, ABC",
            "complexity": "global"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "AAA, BBB, ABC, ABB",
            "complexity": "global"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAB, BBB, AAC, ABC",
            "complexity": "global"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "AAA, BBC, ABB",
            "complexity": "global"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "AAA, BBC, AAC, BBB",
            "complexity": "global"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "AAA, BBC, ABC",
            "complexity": "global"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "AAC, BBC, BBB",
            "complexity": "global"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, ABC",
            "complexity": "global"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAB, BBB, ABC",
            "complexity": "global"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "CCC, ABB",
            "complexity": "global"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAB, AAC",
            "complexity": "global"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "AAA, BBB, CCC",
            "complexity": "global"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "AAB, BBB, ABC",
            "complexity": "global"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAA, BBB, ABC",
            "complexity": "global"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "AAA, BBC",
            "complexity": "global"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "AAB, BBB, CCC, ABB",
            "complexity": "global"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "ABC",
            "complexity": "global"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BCC, ACC, CCC",
            "complexity": "global"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "AAB, BBC, ABB",
            "complexity": "global"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "AAC, BBC, BBB, ABB",
            "complexity": "global"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "AAA, BBC, ABC, ABB",
            "complexity": "global"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "AAA, BBC, BBB, ABB",
            "complexity": "global"
        },
        {
            "white constraint": "CC, BC",
            "black constraint": "BBC, BBB",
            "complexity": "global"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, ACC",
            "complexity": "global"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "AAB, BBC, BBB",
            "complexity": "global"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "AAB, BBC, AAA, ABB",
            "complexity": "global"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "AAA, BBC, BBB, ABC",
            "complexity": "global"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAA, BBB, AAC",
            "complexity": "global"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBC, ABB, AAB, BBB, ABC",
            "complexity": "global"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "AAC, BBC, ABB",
            "complexity": "global"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBB, ABC, ABB",
            "complexity": "global"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "AAB, BBC",
            "complexity": "global"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "AAB, BBC, AAC, ABB",
            "complexity": "global"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "AAB, BBB, ABC, ABB",
            "complexity": "global"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "ABB, AAA, AAB, BBB, ABC",
            "complexity": "global"
        },
        {
            "white constraint": "BC",
            "black constraint": "BCC",
            "complexity": "global"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, BBB, AAC, ABC",
            "complexity": "global"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB",
            "complexity": "global"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, BBB, ABB",
            "complexity": "global"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAA, BBB, AAC, ABC",
            "complexity": "global"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "AAA, BBB, ABC, ABB",
            "complexity": "global"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "AAA, BBC, ABB",
            "complexity": "global"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "AAA, BBC, AAC, BBB",
            "complexity": "global"
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAB, AAC",
            "complexity": "global"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "AAB, BBC, AAA",
            "complexity": "global"
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "AAB, AAC",
            "complexity": "global"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "AAC, BBC, BBB, ABC",
            "complexity": "global"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "BBB, ABC",
            "complexity": "global"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "ABC, ABB",
            "complexity": "global"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "AAB, BBB, ABC",
            "complexity": "global"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "AAB, BBC, AAA, ABC",
            "complexity": "global"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "AAA, BBC, BBB",
            "complexity": "global"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "AAB, BBC",
            "complexity": "global"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "AAB, BBC, AAC, BBB",
            "complexity": "global"
        }
    ],
    "unsolvable": [
        {
            "white constraint": "",
            "black constraint": "BBC, CCC, AAA, ABB, ABC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "AAA, BBC, ABC, CCC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, ABB, AAA, CCC, AAC, BCC, ABC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BCC, BBC, ACC, ABB",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "ABB, AAB, CCC, AAC, BCC, ABC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "CCC, ABB, BBB, BCC, ACC, ABC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, ABB, AAA, CCC, BCC, ACC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "CCC, AAA, ABB, BCC, ABC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, CCC, AAB, ABB, ABC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "ABB, AAA, CCC, BBB, BCC, ABC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, AAB, BCC, ACC, ABC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BCC, AAB",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, CCC, BBB, BCC, ACC, ABC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "ABB, AAA, CCC, BBB, AAC, BCC, ABC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "ABB, AAA, CCC, BBB, AAC, BCC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "CCC, AAB, BBB, BCC, ACC, ABC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, CCC, AAC, BCC, ACC, ABC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "CCC, ABB, BBB, BCC, ABC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "AAC, BBC, CCC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "CC, BC",
            "black constraint": "",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BCC, AAC, ABC, CCC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BCC, BBC, ABC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, CCC, AAB, BCC, ACC, ABC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, CCC, BBB, AAC, BCC, ABC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "BB, CC",
            "black constraint": "",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "CCC, ABB, BBB, BCC, ACC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, CCC, AAB, AAC, BCC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, CCC, AAA, AAC, BCC, ABC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, CCC, BBB, BCC, ACC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, ABB, AAB, AAC, BCC, ACC, ABC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, CCC, AAB, BBB, AAC, BCC, ACC, ABC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, ABC, CCC, ABB",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BCC, BBC, AAC, AAB",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BCC, BBC, AAC, ACC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BCC, BBC, ACC, AAB",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, AAC, BCC, ACC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, CCC, ABB, BCC, ACC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, CCC, AAB, AAA, BBB, AAC, BCC, ABC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, ABB, CCC, AAC, BCC, ACC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, CCC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BCC, BBB, ABC, CCC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, CCC, AAA, BBB, BCC, ACC, ABC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, CCC, AAA, BBB, BCC, ACC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, BCC, ACC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, CCC, BCC, ACC, ABC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "AAC, BBC, ABC, CCC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "CCC, ABB, BCC, ACC, ABC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BCC, ACC, BBB, CCC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "CCC, AAA, ABB, BBB, BCC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, ABC, CCC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, ABB, AAB, CCC, BCC, ABC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BCC, AAB, ABC, CCC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, ABB, AAA, CCC, BCC, ABC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, CCC, BBB, AAC, BCC, ACC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, CCC, BBB, BCC, ABC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, ABB, CCC, BCC, ACC, ABC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, ABB, CCC, BBB, BCC, ACC, ABC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BCC, ACC, ABC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "ABB, AAA, CCC, BBB, BCC, ACC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "AC, AB, BB, CC, BC",
            "black constraint": "",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBB, ABC, CCC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, CCC, AAA, AAC, BCC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "BB, AA, CC, BC",
            "black constraint": "",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "BC",
            "black constraint": "",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BCC, AAC, CCC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "CCC, BBB, BCC, ACC, ABC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BCC, ACC, ABC, CCC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, CCC, AAA, BBB, AAC, BCC, ACC, ABC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, CCC, AAB, AAA, BBB, AAC, BCC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "AAB, CCC, ABB",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, CCC, AAA, BCC, ABC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "CCC, AAB, BBB, AAC, BCC, ABC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, ABB, AAB, CCC, AAC, BCC, ABC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BCC, ABC, CCC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "AAB, BBC, ABC, CCC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "AC, CC, BC",
            "black constraint": "",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, CCC, AAB, AAC, BCC, ABC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, ABB, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BCC, BBC, CCC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BCC, AAC, BBB, CCC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "CCC, AAB, AAA, BBB, BCC, ABC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BBB, AAC, BCC, ACC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, CCC, AAB, BBB, AAC, BCC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BCC, ABC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BCC, BBC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, CCC, ABB, BCC, ABC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, CCC, AAB, ABB, BCC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, AAB, AAC, BCC, ABC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, CCC, AAB, AAA, AAC, BCC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BCC, AAA, BBB, CCC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BCC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "CCC, AAB, ABB, BCC, ACC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BCC, CCC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "AAB, BBC, CCC, ABB",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BCC, CCC, ABB",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, CCC, AAB, BCC, ABC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, CCC, AAC, BCC, ABC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "CCC, ABB, AAC, BCC, ABC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "CCC, AAB, BBB, BCC, ABC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "CC",
            "black constraint": "",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, CCC, AAB, AAA, BCC, ACC, ABC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "ABB, CCC, BBB, AAC, BCC, ABC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BCC, ACC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, ABB, AAB, CCC, BCC, ACC, ABC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "CCC, AAA, BBB, BCC, ACC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, CCC, ABB",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "CCC, ABB",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBB, CCC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "CCC, AAB, ABB, AAC, BCC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "BB, CC, BC",
            "black constraint": "",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, CCC, AAB, AAA, AAC, BCC, ABC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BCC, BBC, CCC, ABB",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, ABB, AAA, CCC, AAC, BCC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "AAA, BBC, CCC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, CCC, AAB, BBB, AAC, BCC, ACC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BCC, AAC, CCC, ABB",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "CCC, AAB, ABB, BCC, ACC, ABC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, CCC, AAB, BBB, BCC, ACC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, ABB, AAB, CCC, AAC, BCC, ACC, ABC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "ABC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BCC, BBC, ACC, ABC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "CCC, AAA, BBB, BCC, ABC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BCC, AAC, ABB",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "CCC, AAB, BBB, AAC, BCC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "CCC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, ABB, AAA, CCC, BCC, ACC, ABC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "CCC, AAB, AAC, BCC, ABC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, ABB, AAC, BCC, ACC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, ABB, AAB, AAC, BCC, ACC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, ABB, CCC, AAC, BCC, ACC, ABC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "CCC, BBB, AAC, BCC, ABC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BCC, AAB, CCC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, CCC, AAB, BBB, AAC, BCC, ABC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "ABB, AAA, CCC, BBB, BCC, ACC, ABC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "ABC, CCC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BCC, ACC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BCC, ACC, ABC, ABB",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, ABB, AAB, CCC, BBB, AAC, BCC, ACC, ABC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BCC, ABB",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "AAB, BBC, CCC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BCC, ABC, CCC, ABB",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, CCC, BBB, AAC, BCC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BCC, AAC, AAB, CCC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BCC, BBC, ACC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BCC, AAB, ABC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "AAA, BBB, ABC, CCC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, CCC, AAA, BBB, BCC, ABC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, ABB, CCC, AAC, BCC, ABC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BCC, AAA, ABC, CCC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, AAC, BCC, ACC, ABC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BCC, ABC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "CCC, AAB, ABB, BCC, ABC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, CCC, AAA, BCC, ACC, ABC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BCC, ACC, CCC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "ABC, CCC, ABB",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, CCC, AAA, ABB, BCC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BCC, BBC, ACC, CCC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, CCC, AAB, BBB, BCC, ACC, ABC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BCC, AAA, CCC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, CCC, AAA, BCC, ACC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BCC, BBC, AAB, CCC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, ABB, CCC, BBB, BCC, ACC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BCC, AAC, ABC, ABB",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "AC, BB, CC, AA, BC",
            "black constraint": "",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BCC, ACC, CCC, ABB",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, AAC, BCC, ACC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, CCC, AAA, BBB, AAC, BCC, ACC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, CCC, AAB, AAA, BBB, BCC, ACC, ABC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, ABB, BCC, ACC, ABC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, ABB, AAB, CCC, AAC, BCC, ACC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, CCC, AAA, BBB, AAC, BCC, ABC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, ABB, CCC, BBB, AAC, BCC, ACC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, ABB, AAB, CCC, AAC, ABC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, CCC, ABB, AAC, ABC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BCC, BBC, ABC, CCC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, CCC, AAB, AAA, BCC, ABC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BCC, AAA, AAB, CCC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, ABB, AAB, CCC, AAC, BCC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, CCC, AAB, AAA, BBB, BCC, ACC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "CCC, ABB, BBB, AAC, BCC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BCC, BBB, AAB, CCC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BCC, BBB, CCC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, CCC, ABB, AAC, BCC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BCC, BBC, BBB, CCC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BCC, BBB, CCC, ABB",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, CCC, AAA, BBB, AAC, BCC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "CCC, AAA, BBB, BCC, ACC, ABC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BCC, BBC, AAC, ABC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BCC, BBC, AAC, CCC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "CCC, AAB, AAA, BBB, BCC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "AAC, BBC, CCC, ABB",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BCC, AAA, CCC, ABB",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BCC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, ABB, AAA, CCC, BBB, BCC, ACC, ABC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "CCC, AAB, BBB, BCC, ACC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, ABB, AAC, BCC, ACC, ABC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "AAA, BBB, CCC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, ABB, AAB, CCC, BCC, ACC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BCC, BBC, AAC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, CCC, AAC, BCC, ACC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "AAA, BBC, CCC, ABB",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "AAB, ABC, CCC, ABB",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BCC, ACC, ABB",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "CCC, AAB, AAA, BCC, ABC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BCC, AAB, CCC, ABB",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BCC, ACC, ABC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, CCC, AAB, AAA, BCC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, CCC, AAB, AAA, BCC, ACC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, CCC, AAB, BCC, ACC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, CCC, AAA, BBB, BCC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BCC, ABC, ABB",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BBC, CCC, AAB, ABB, AAC",
            "complexity": "unsolvable"
        },
        {
            "white constraint": "",
            "black constraint": "BCC, BBC, AAA, CCC",
            "complexity": "unsolvable"
        }
    ],
    "unclassified": [
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, AAA, AAC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, ABB, AAC, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "ABB, AAB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "CCC, ABB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAB, BBB, AAC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, BBB, AAC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "ABB, AAA, BBB, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ACC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "AAC, BBC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, AAA, ABC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, BBB, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, BCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, BBB, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAB, BBB, AAC, BCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, AAA, BBB, AAC, BCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, AAB, BBB, AAC, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAC, BBC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BCC, BBC, ACC, BBB",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, BBC, AAC, AAB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, AAC, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "AAA, BBC, CCC, ABB",
            "complexity lower bound": "iterated_logarithmic",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAB, AAC, BBB, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, BBB, AAC, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "AAB, ABB, ABC, CCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, BBB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, BBB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, AAA, BBB, AAC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, AAB, BBB, AAC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBB, ACC, ABC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "AAA, AAB, BBB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, ACC, ABC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, ACC, ABC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, AAA, AAB, BBB, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "AAA, BBC, CCC",
            "complexity lower bound": "iterated_logarithmic",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, BBC, AAC, BBB",
            "complexity lower bound": "iterated_logarithmic",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, BBB, AAC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, BBB, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAB, AAA, BBB, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAB, BBB, AAC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, ACC, BBB, AAB",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAC, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, BBB, AAC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAB, BBC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, AAA, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAC, BBB, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, BBB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "AAB, BBC, AAA, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "ABB, BBB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BCC, ACC, AAB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, AAC, AAB, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAB, BBB, AAC, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "CCC, AAB, ABB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, AAC, ACC, BBB",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, BBC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, BBC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAB, AAC, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, CCC, AAB, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, AAC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, BBC, AAA, BBB",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "AAC, BBC, BBB, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAA, BBC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, ABB, AAB, CCC, AAC, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, BBB, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, CCC, AAA, AAC, BCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "ABB, AAC, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAB, AAC, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAC, BBC, BBB",
            "complexity lower bound": "iterated_logarithmic",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, AAA, BBB, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAA, BBB, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, AAB, AAC, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, AAA, AAB, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, BBB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "ABB, AAB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "ABB, AAA, BBB, AAC, BCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, BBB, AAC, BCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAB, BBB, AAC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, AAC, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, AAB, BBB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "CCC, AAA, BBB, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, AAC, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BCC, AAC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "CCC, AAB, BBB, AAC, BCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BCC, BBC, AAA, CCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAC, BBC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAA, AAB, BCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "AAC, BBC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAB, AAC, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, BCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, AAB, BBB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, AAB, BBB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, BBB, AAC, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "CCC, BBB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, AAB, BBB, AAC, BCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, AAC, BBB, AAB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAA, BBB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, ABB, AAB, AAC, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, AAA, AAB, BBB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, BBC, AAC, AAB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAC, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, BBC, AAA, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, AAA, ACC, BBB",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, AAA, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "AAB, BBC, AAA, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAC, BBB, ACC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, ABB, CCC, AAC, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, ACC, ABC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "CCC, BBB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "CCC, AAA, AAB, BBB, AAC, BCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAC, BBC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, BBB, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, AAA, AAB, BBB, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "CCC, AAA, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "ABB, BBB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "ABB, AAB, AAA, CCC, BBB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, BBB, AAC, BCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "CCC, AAA, AAB, AAC, BCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, AAA, BBB, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, BBB, AAC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAB, BBB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, ACC, BBB",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, BBB, AAC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, AAA, AAB, BBB, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAA, BBB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, CCC, AAA, ABB, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "AAC, BBC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, AAA, AAC, CCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAA, BBB, AAC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, AAC, BCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "AAA, BBC, ABC, CCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAB, BBB, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "AAB, BBC, AAA, BBB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, BBB, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "AAA, BBC, AAC, BBB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, BBB, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, ABB, AAA, CCC, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAA, AAB, AAC, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "AAB, BBC, CCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BCC, BBC, ACC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ACC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, AAB, BBB, AAC, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, BBC, ACC, BBB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "CCC, AAA, AAB, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, AAB, BBB, AAC, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, BBC, ACC, BBB",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, AAC, ABC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAB, AAC, ACC",
            "complexity lower bound": "logarithmic",
            "complexity upper bound": "global"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, AAA, BBB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, AAC, ABC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAA, AAC, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAC, BBB, ABB",
            "complexity lower bound": "iterated_logarithmic",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAB, BBB, AAC, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, AAA, AAB, BBB, BCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BCC, AAC, AAB, CCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, BBC, AAA, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "CCC, ABB, BBB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, BBB, AAC, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAB, BBB, AAC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, AAB, BBB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, AAB, BBB, AAC, BCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "CCC, AAA, ABB, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAB, BBB, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, ACC, AAB, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, BBB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "ABB, AAA, CCC, BBB, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, BBC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAB, BBC, ACC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, AAA, BBB, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAB, BBC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAB, AAC, BBB, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "AAA, BBB, ABC, CCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BCC, ACC, BBB, AAB",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, BBB, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAA, AAB, BBB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAC, BCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, AAA, AAC, ABB",
            "complexity lower bound": "iterated_logarithmic",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, AAC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, BBB, AAC, BCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, AAB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, AAA, AAC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAC, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, BBB, AAC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, AAA, AAB, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, AAA, AAB, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "AAA, AAB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAA, BBB, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAA, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAC, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, CCC, ABB, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, BBC, AAA, AAC",
            "complexity lower bound": "iterated_logarithmic",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, BBB, AAC, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, BBB, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, AAA, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, AAA, BBB, AAB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAA, BBB, AAC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "AAC, BBC, BBB",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAA, AAB, BBB, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, AAB, BBB, AAC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, ACC, BBB, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, AAB, BBB, AAC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, AAB, AAC, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAA, AAB, AAC, BCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, BBC, AAA, AAB",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, BBB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "AAB, BBC, AAA, BBB",
            "complexity lower bound": "iterated_logarithmic",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, BBB, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, CCC, AAA, ABB, BCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAC, BBC, BBB, ABB",
            "complexity lower bound": "iterated_logarithmic",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, BBB, ACC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "ABB, AAA, CCC, BBB, AAC, BCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, AAA, AAB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAA, BBB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, AAB, BBB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAA, BBC, ABC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, AAB, BBB, AAC, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, BBB, BCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, AAA, AAB, AAC, BCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, BBC, ACC, BBB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAA, AAB, BBB, AAC, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "CCC, AAB, BBB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, AAA, BBB, AAC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, AAA, AAC, AAB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, ACC, BBB, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "ABB, BBB, AAC, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "CCC, AAA, BBB, AAC, BCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "ABB, AAA, AAB, AAC, BCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAB, BBB, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BCC, BBC, AAB, CCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, BBB, AAC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "CCC, ABB, BBB, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, AAC, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBB, ACC, ABC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, BBB, AAC, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAB, BBB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, BBB, AAC, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, AAC, BBB, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "ABB, AAB, BBB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, AAC, BBB, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, BBC, ACC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, BBB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, AAA, AAB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, BBB, AAC, BCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, BBB, AAC, BCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAB, BBC, AAA, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAA, BBB, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, AAA, AAB, AAC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BCC, AAC, ABC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, AAA, AAC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, CCC, AAB, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAB, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAB, AAC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, BBB, AAC",
            "complexity lower bound": "iterated_logarithmic",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAB, AAC, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, BBB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, AAA, AAB, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BCC, ACC, BBB",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ACC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAB, AAA, ACC",
            "complexity lower bound": "logarithmic",
            "complexity upper bound": "global"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, AAB, BBB, AAC, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAB, BBB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "ABB, CCC, BBB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAA, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, AAA, ABC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, AAA, BBB, AAC, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, AAC, AAB, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, BBC, AAA, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, AAA, AAB, BBB, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, AAB, BBB, AAC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, AAB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "CCC, ABB, BBB, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, AAC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAC, BBC, BBB, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAB, AAC, BBB, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAB, BBB, AAC, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, BBB, AAC, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, ABB, AAB, CCC, AAC, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "CCC, AAB, ABB, AAC, BCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, AAA, BBB, AAC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "AAB, BBB, AAC, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, BBB, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "ABB, AAA, AAB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, ABB, AAB, AAC, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAB, BBC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAA, BBB, ACC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, AAA, AAB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, BBB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, BBC, CCC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BCC, BBC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, BBB, AAC, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, AAC, ACC, BBB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, BBB, AAC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAB, AAC, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "ABB, AAA, CCC, BBB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAA, AAB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "ABB, AAB, CCC, BBB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, AAA, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BCC, BBC, ACC, AAB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, AAC, BBB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, BBC, AAA, BBB",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, AAC, BCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BCC, AAC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, AAA, AAB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, CCC, ABB, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, BBB, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, BBB, AAC, BCC",
            "complexity lower bound": "iterated_logarithmic",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "AAA, BBC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, AAB, AAC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, BBB, AAC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAC, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, CCC, ABB, AAC, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAC, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, CCC, ABB, AAC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, AAB, AAC, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "ABB, AAA, BBB, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, BBB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, AAA, AAB, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, BBB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, BBB, AAC, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BCC, AAA, AAB, CCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAB, BBC, AAC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, BBB, AAC, BCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, BBB, AAC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, AAC, CCC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAA, BBB, ABC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, AAB, BBB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, AAB, BBB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAA, BBC, AAC, BBB",
            "complexity lower bound": "iterated_logarithmic",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BCC, ACC, BBB, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, AAC, ACC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, AAA, ABC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, BBC, AAC, BBB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAC, BCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, BBB, ACC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "AAA, BBC, BBB, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, AAC, ABC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "CCC, ABB, BBB, AAC, BCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, BBB, AAC, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "ABB, AAB, BBB, AAC, BCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAC, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "ABB, AAA, BBB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAA, AAB, AAC, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAC, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, BBC, AAA, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "AAA, AAB, BBB, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAB, BBB, AAC, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "CCC, ABB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAC, BBB, ABC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAC, BBB, ACC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "AAC, BBC, ABC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, BBB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, BBC, BBB, ABB",
            "complexity lower bound": "logarithmic",
            "complexity upper bound": "global"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, BBB, AAC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, CCC, AAB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAC, BBC, BBB, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "CCC, AAB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAA, AAB, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BCC, BBC, ACC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAB, BBB, AAC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAB, BBC, AAC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, AAA, AAB, AAC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, ABB, AAB, AAC, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, AAA, ACC, AAC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAB, BBB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAB, BBB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "ABB, AAB, BBB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAC, ABB",
            "complexity lower bound": "logarithmic",
            "complexity upper bound": "global"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, AAB, BBB, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, CCC, AAB, AAC, BCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, AAA, AAB, BBB, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, AAA, AAB, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "AAB, AAC, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, BBB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, AAA, ACC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAC, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "CCC, AAA, ABB, AAC, BCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BCC, ACC, ABC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "ABB, AAB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, BBB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, AAA, AAB, BBB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "ABB, AAA, CCC, BBB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, AAA, BBB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, BBC, AAC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAC, BBB, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAB, BBC, AAA, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, BBB, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, BBC, ACC, AAB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAA, AAB, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, AAB, BBB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAA, AAB, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAB, BBB, AAC, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAA, BBC, AAC",
            "complexity lower bound": "iterated_logarithmic",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, AAB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "AAC, BBC, BBB, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBB, ABC, CCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, BBC, AAA, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, CCC, AAA, AAC, BCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, AAB, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, ABC, CCC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, AAC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "ABB, AAA, BBB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, BBB, AAC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAC, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, BBB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, BBB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAA, BBB, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, BBC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, BBC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, BBB, ABC, CCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAB, AAC, BBB, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "CCC, AAA, AAB, BBB, BCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAA, AAB, AAC, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, BBB, AAC, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAB, BBB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, AAC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAC, BCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, BBB, AAC, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, AAC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAA, AAC, BBB, ABB",
            "complexity lower bound": "iterated_logarithmic",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "AAC, BBC, ABB, CCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, BBB, AAC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, AAA, AAB, BBB, AAC, BCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, AAA, AAC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, BCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, AAC, BBB, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BCC, AAC, BBB",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAC, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "CCC, BBB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAB, BBB, AAC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAC, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, BBB, AAC, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, BBB, AAC, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "CCC, AAB, BBB, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, AAC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, AAA, BBB, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, AAA, BBB, AAB",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "ABB, AAB, BBB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, CCC, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAA, AAC, ABB",
            "complexity lower bound": "logarithmic",
            "complexity upper bound": "global"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, ACC, BBB, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, AAB, BBB, AAC, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, AAA, ABC, CCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, ACC, BBB, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, AAA, AAB, BBB, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAB, AAA, ACC, AAC",
            "complexity lower bound": "logarithmic",
            "complexity upper bound": "global"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, AAA, BBB, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAA, AAB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAC, BBC, BBB, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, BBB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, BBB, ACC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "AAC, BBC, BBB, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, BBB, AAC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, BBB, AAC, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAB, AAC, ABB",
            "complexity lower bound": "logarithmic",
            "complexity upper bound": "global"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "ABB, AAB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, AAA, AAB, BBB, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "AAA, BBC, ABC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BCC, AAC, ACC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, AAA, BBB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BCC, BBC, AAC, BBB",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, AAB, ABC, CCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, AAA, AAC, AAB",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, AAA, AAB, AAC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "CCC, AAB, ABB, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BCC, AAC, ABC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, CCC, AAA, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, ACC, BBB, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAA, AAC, BBB, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "AAB, CCC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, ACC, BBB, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAB, BBB, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, BBB, AAC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAA, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, AAA, AAC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, CCC, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAB, BBC, AAC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, AAA, AAB, BBB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, BBC, ACC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAA, BBC, AAC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, BBC, ACC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAA, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, BBC, ABB",
            "complexity lower bound": "logarithmic",
            "complexity upper bound": "global"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAB, BBB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, BBB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BCC, ACC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "CCC, AAA, AAB, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, BBB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, BBC, AAA, AAC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAA, BBB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAB, BBB, AAC, BCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAA, AAC, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAB, BBC, BBB",
            "complexity lower bound": "logarithmic",
            "complexity upper bound": "global"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, BBB, AAC, BCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BCC, AAB, CCC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, AAC, AAB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, AAC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, ABB, AAB, AAA, CCC, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, CCC, AAA, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAA, AAC, BCC",
            "complexity lower bound": "iterated_logarithmic",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, BBC, AAC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, BBB, AAC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAB, AAC, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, BBB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, BBB, ABB",
            "complexity lower bound": "logarithmic",
            "complexity upper bound": "global"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, BBB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, AAA, AAC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "AAB, BBB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAC, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, AAA, AAB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, BBB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAB, AAC, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAB, BBB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, BBB, AAC, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, AAA, BBB, AAC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, CCC, AAB, ABB, AAC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAB, BBC",
            "complexity lower bound": "logarithmic",
            "complexity upper bound": "global"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, AAC, AAB, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, AAA, BBB, AAC, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAC, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, AAC, AAB, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, BBC, AAA, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAA, AAB, BBB, AAC, BCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, AAB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, AAB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAC, BBC, BBB, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, AAA, AAB, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BCC, BBC, AAC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "CCC, AAA, BBB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BCC, BBC, ACC, AAB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAA, BBC, BBB, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "AAA, BBC, ABC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAA, BBB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAC, BBC, ABB",
            "complexity lower bound": "iterated_logarithmic",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, AAB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, BBB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, BBB, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAA, AAB, BBB, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAA, BBB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BCC, AAB, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, BBB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAA, AAC, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, AAA, BBB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAA, BBB, AAC, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, AAA, AAB",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, AAB, BBB, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, AAA, AAB, BBB, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, ABB",
            "complexity lower bound": "logarithmic",
            "complexity upper bound": "global"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, BBB, AAC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, BBC, AAC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, BBC, ACC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, BBB, AAC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, BBB, AAC, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "ABB, AAA, BBB, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, AAA, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BCC, AAC, BBB, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAB, BBB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, AAC, BBB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "CCC, AAB, ABB, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, BBB, AAC, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAA, BBC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, AAB, AAC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAB, BBC, AAC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "AAB, BBC, AAA, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBB, ACC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BCC, AAC, BBB, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, AAA",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "ABB, AAB, CCC, BBB, AAC, BCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAB, BBC, BBB, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAA, BBB, AAC",
            "complexity lower bound": "iterated_logarithmic",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, BBB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAB, BBC, AAC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BCC, AAC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, BBB, AAC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAA, BBC, AAC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "AAA, BBB, ABC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAB, ACC",
            "complexity lower bound": "logarithmic",
            "complexity upper bound": "global"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, CCC, AAA, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, BBC, AAC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "CCC, AAB, BBB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "AAA, AAB, BBB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, ACC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, AAC, ACC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAC, BBB, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, BBC, AAC, BBB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAC, BCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BCC, CCC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, BBB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, AAA, BBB, AAC, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAC, BCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "ABB, AAA, BBB, AAC, BCC",
            "complexity lower bound": "iterated_logarithmic",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, AAC, AAB, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, BBC, AAA, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "ABB, AAB, CCC, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, AAB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, CCC, AAB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, BBB, AAC, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAA, BBB, AAC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "AAA, BBB, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBB, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, AAA, AAC, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAC, BBB, ABC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, BBB, AAC, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, AAC, BCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, AAA, BBB, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAC, BBC, BBB, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "AAC, BBC, BBB, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, AAC, BBB, CCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, CCC, AAB, ABB, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAB, BBB, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, ABB, AAB, CCC, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAA, BBB, AAC, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "CCC, AAA, AAB, BBB, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, BBB, AAC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, AAB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, AAA, BBB, AAC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, CCC, ABB, AAC, BCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAB, BBB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "AAB, BBB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, BBB, AAC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, AAA, AAB, BBB, AAC, BCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "CCC, AAB, ABB, AAC, BCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BCC, AAC, ACC, BBB",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBB, AAC, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, AAA, BBB, AAC, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAB, BBC, AAA",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBB, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BCC, BBC, AAC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, AAB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, CCC, AAB, ABB, BCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, AAA, AAC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAC, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAB, BBB, AAC, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, CCC, AAA, AAB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAC, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, AAC, BCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAA, BBB, AAC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, AAA, AAB, BBB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, AAC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BCC, BBC, CCC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, BBC, AAC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, BBC, AAC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, BBB, AAC, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "AAA, BBB, ABC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, BBC, ACC, AAB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "AAB, BBC, AAA, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAB, BBB, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, BBC, ACC, AAB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "ABB, AAA, CCC, BBB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ACC, ABC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAC, BBC, ABC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, BBB, AAC, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, ABB, AAA, CCC, AAC, BCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "ABB, AAA, CCC, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAB, AAC, BCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, AAC, ABC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, AAB, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAB, BBB, AAC, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, BBC, AAA",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAA, AAB, BBB, AAC, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, AAA, AAB, BBB, AAC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "ABB, BBB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "CCC, AAA, BBB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BCC, AAC, CCC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, AAB, BBB, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, BBB, AAC, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, BBB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, BBB, AAC, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAC, BBB, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAA, AAB, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAA, AAB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, AAA, AAB, BBB, AAC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BCC, BBC, AAC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, AAA, BBB, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, BBB, AAC, BCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, AAC, BBB, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, AAC, BBB, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAB, BBB, AAC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAA, AAB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, AAC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "AAB, BBB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, ABB, AAC, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "CCC, ABB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "CCC, AAB, BBB, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, AAA, AAB, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "AAA, AAB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, AAA, AAB, BBB, BCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, CCC, AAB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAA, BBC, BBB, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, AAA, BBB, AAC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, BBB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAB, BBB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "CCC, AAB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, AAA, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAB, BBB, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, BBB, AAC, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAB, BBC, AAC, BBB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAA, AAB, BBB, AAC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BCC, BBC, AAC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, ABB, AAC, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAB, AAC, BBB, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BCC, ACC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAA, BBC, ACC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, BBC, AAA, AAB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, AAB, AAC, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, BBB, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAA, BBB, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, BBC, ACC, AAB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, AAA, ACC, AAB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, AAC, BCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, AAC, ACC, AAB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, CCC, AAB, AAC, BCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, CCC, AAA, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "ABB, AAA, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, AAA, AAC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BCC, AAB, CCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, AAA, AAB, AAC, BCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, BBB, AAC, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBB, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAA, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, BBB, AAC, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAB, BBC, ABB",
            "complexity lower bound": "logarithmic",
            "complexity upper bound": "global"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAB, BBC, AAA, AAC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "ABB, AAB, CCC, BBB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, BBC, AAA, AAC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "AAA, BBB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "ABB, AAA, CCC, BBB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, AAC, AAB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, AAB, BBB, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, ABC, CCC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BCC, BBC, AAC, AAB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, BBB, AAC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, BBB, AAC, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, AAA, BBB",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "ABB, AAB, BBB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, AAC, BBB, ABB",
            "complexity lower bound": "iterated_logarithmic",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAB, BBB, ACC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, BBB, AAC, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, AAB, BBB, AAC, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, BBB, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, BBC, AAC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAA, BBB, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, BBC, AAC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BCC, ACC, ABC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, AAC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAB, BBC, BBB, ABB",
            "complexity lower bound": "logarithmic",
            "complexity upper bound": "global"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, AAC, BBB, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, AAA, AAB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, BBB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BCC, ABC, CCC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBB, AAC, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, AAA, BBB, AAC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAB, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, AAB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BCC, BBB, ABC, CCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "AAA, AAB, BBB, AAC, BCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "CCC, AAB, ABB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "ABB, AAA, AAB, AAC, BCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, CCC, AAB, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAA, AAB, BBB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BCC, AAC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, AAA, AAB, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAB, BBB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, AAB, BBB, AAC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, AAC, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "BB, AC, CC, BC",
            "black constraint": "AAB, AAA, AAC, ABB",
            "complexity lower bound": "logarithmic",
            "complexity upper bound": "global"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, AAA, AAB, AAC, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, AAA, AAB, BBB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAA, BBB, AAC, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ACC, ABC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAA, BBB, AAC, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, AAA, AAB, BBB, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "AAA, BBB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAB, BBB, AAC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, AAA, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, ACC, AAB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAC, BBC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, AAC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, ABB, AAC, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "AAC, BBC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, BBB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAB, BBB, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAC, BBC, ACC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "ABB, BBB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "ABB, AAA, BBB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, ABB, AAB, AAC, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAA, BBB, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, AAC, AAB, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "AAB, BBB, AAC, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, ABB, CCC, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "ABB, AAA, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, AAA, BBB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BCC, AAA, ABC, CCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAB, BBC, AAC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BCC, ACC, BBB, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "CCC, AAA, BBB, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, AAC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAB, BBB, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "CCC, AAB, BBB, AAC, BCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, BBC, AAA, CCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, BBC, AAC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "CCC, AAA, ABB, BBB, BCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAB, BBB, AAC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, AAB, BBB, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAC, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, BBB, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "AAC, BBB, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "AAA, BBB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "AAB, BBC, AAC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BCC, AAB, ABC, CCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "CCC, AAB, ABB, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBB, ACC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAA, BBC, AAC, ABB",
            "complexity lower bound": "iterated_logarithmic",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, CCC, AAA, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, AAA",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAB, BBC, BBB, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, CCC, AAC, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, BBB, AAC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, ABB, CCC, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "CCC, BBB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "ABC, CCC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, AAA, AAB, BBB, AAC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, BBC, AAC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, BCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, ACC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, BBC, AAC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, ACC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, AAB, AAA, BBB, AAC, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "ABB, AAA, AAB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAC, BBB, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, AAA, BBB, AAC, BCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BCC, BBC, ACC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, BBC, AAC, AAB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAC, BBC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "ABB, AAA, CCC, BBB, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, CCC, AAA, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, BBB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAB, BBB, AAC, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, AAA, AAB, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, BBB, AAC, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBB, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, BBB, AAC, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, ACC, ABC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, AAA, AAB, BBB, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, BBB, AAC, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, AAB, AAC, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, BBB, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, BBB, AAC, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, AAA, AAC, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, BBB, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BCC, AAC, ACC, AAB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "AAA, BBC, BBB, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, BBB, AAC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "AAA, BBB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, AAA, BBB, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "ABB, BBB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, BBC, AAA, ABB",
            "complexity lower bound": "iterated_logarithmic",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "AAA, AAB, BBB, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "ABB, AAA, BBB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, BBB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, BBB, AAC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "ABB, AAB, CCC, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAB, BBB, AAC, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, AAA, BBB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, BBC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BCC, ACC, CCC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAA, BBB, AAC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, AAA, AAB, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, AAC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, BBB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, AAC, AAB, CCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "CCC, ABB, BBB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, AAB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBB, AAC, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAA, AAB, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAB, AAC, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, AAA, BBB, AAC, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAA, CCC, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "CCC, AAA, ABB, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "AAB, BBC, AAA",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, AAA, BBB, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, AAB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "AAB, BBC, AAC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, AAB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAB, BBB, AAC, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAA, BBB, AAC, BCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "ABB, AAA, CCC, BBB, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAB, BBB, AAC, BCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "ABB, AAB, CCC, BBB, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "ABB, AAB, BBB, AAC, BCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, AAA, AAB, BBB, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, AAC, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, AAC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, AAC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, AAA, AAB, BBB, BCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, BBB, AAC, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, ABB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAB, BBC, AAA, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ACC, ABC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAC, BBC, ABC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, AAB, BBB, AAC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAC, BBC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "CCC, AAA, AAB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "AAC, BBC, ABC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, BBC, AAC, ABB",
            "complexity lower bound": "iterated_logarithmic",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAA, BBB, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, AAA, AAB, AAC, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, AAB, BBB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, AAB, BBB, AAC, BCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, ACC, BBB, AAB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, ACC, BBB, AAB",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, AAA, ACC, BBB",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAB, BBB, AAC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAB, BBB, AAC, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, BBB, AAC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, BBC, AAA",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAB, BBB, AAC, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "AAC, BBC, ACC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, AAB, BBB, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, CCC, AAA, ABB, BCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, AAB, BBB, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, CCC, AAA, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAC, BBC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "ABB, AAA, CCC, BBB, AAC, BCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, AAA, BBB, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "CCC, AAB, BBB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, BBB, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAC, BBB, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, ABB, AAB, CCC, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BCC, AAC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "ABB, AAA, AAB, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "AAB, BBC, ABC, CCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "CCC, AAB, BBB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "AAC, BBC, BBB, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, AAC, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, ABB, AAB, CCC, AAC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "AAC, BBC, BBB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, AAA, BBB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, CCC, AAB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAA, BBB, AAC, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BCC, BBC, AAB, CCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BCC, AAC, ABC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "CCC, ABB, BBB, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, AAA, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAC, BBC",
            "complexity lower bound": "iterated_logarithmic",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, AAC, BCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAB, BBC, AAA, BBB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, AAA, AAB, BBB, AAC, BCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, BBB, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, AAA, BBB, AAC, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, ABB, AAB, CCC, AAC, BCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, BBB, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, AAB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BCC, AAC, BBB, CCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, AAB, BBB, AAC, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, BBC, ACC, BBB",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "AAB, BBB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBB, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "CCC, AAA, AAB, BBB, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, AAA, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "AAB, BBC, AAC, BBB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, AAC, BBB, AAB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BCC, BBB, AAB, CCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAA, AAB, AAC, BCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, AAB, AAC, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, CCC, ABB, AAC, BCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, BBB, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAA, BBB, AAC, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BCC, BBC, AAC, AAB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, BBB, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "AAC, BBC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, AAC, ACC, AAB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAA, AAB, BBB, AAC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAB, BBB, AAC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BBC, ABB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "CCC, AAA, AAB, BBB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BCC, ACC, ABC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "ABB, BBB, AAC, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, CCC, ABB, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "ABB, AAB, AAA, CCC, BBB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, CCC, AAB, ABB, BCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, ACC, AAB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, AAA, BBB, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, ABB, BBB, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, CCC, AAA, AAB, AAC, BCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAB, BBC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, BBB, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BCC, ACC, BBB, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "AAC, BBB, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAB, BBC, AAC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAB, AAC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, AAA, BBB, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, ACC, BBB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "ABB, BBB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, ACC, BBB",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAB, BBB, AAC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAB, BBB, ACC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAB, BBB, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, AAA, AAB, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAC, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, CCC, AAA, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, AAB, BBB, AAC, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAB, CCC, AAC, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAA, AAB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, AAB, BBB, AAC, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BCC, BBC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "ABB, AAA, AAB, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BCC, AAC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "BB, CC, AA",
            "black constraint": "BCC, BBC, ACC, AAB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAA, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BCC, BBB, CCC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, AAA, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, AAB, BBB, AAC, BCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, AAA, AAB, BBB, AAC, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, AAB, BBB, AAC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, BBC, AAA, AAB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "ABB, AAA, AAB, CCC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAA, BBC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "CCC, AAA, BBB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, BBB, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, AAA, AAB, BBB, AAC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAA, AAB, AAC, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, ABB, AAA, AAB, CCC, AAC, BCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAB, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, AAC, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "AAB, BBC, ABB, CCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, AAA, BBB, BCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, AAA, AAB, AAC, BCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, CCC, ABB, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "AAB, BBB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, AAB, BBB, AAC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAA, AAB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, AAA, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, AAA, AAB, BBB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "AAB, BBC, AAC, BBB",
            "complexity lower bound": "iterated_logarithmic",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAB, BBB, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "AAC, BBC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "ABB, AAB, BBB, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "AAA, AAB, BBB, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, ACC, AAB, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAB, BBB, AAC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, AAB, BBB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, ACC, AAB, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, CCC, ABB, AAC, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BBC, AAB, BBB, AAC, BCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, AAA, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAB, BBC, ACC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, CCC, AAB, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "AAC, BBC, ACC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC",
            "black constraint": "BBC, ABB, BBB, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BCC, AAC, AAB, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, AAC, AAB, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BCC, AAC, BBB, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "CCC, ABB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "CCC, AAB, BBB, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "ABB, AAA, AAC, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BCC, AAA, CCC, ABB",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BCC, AAC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "BBC, CCC, AAA, AAB, BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, AAA, AAB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BC",
            "black constraint": "ABB, CCC, BBB, AAC, BCC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, BB, CC, AA, BC",
            "black constraint": "ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "BCC, ACC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AB, CC, BC",
            "black constraint": "BBC, ABB, BBB, AAC, BCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "ABB, AAB, BBB, AAC, ABC",
            "complexity lower bound": "constant",
            "complexity upper bound": "iterated_logarithmic"
        },
        {
            "white constraint": "AA, CC, BC",
            "black constraint": "BBC, ABB, AAC, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, AB, CC, BC",
            "black constraint": "BBC, ABB, AAC, BCC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AC, BC",
            "black constraint": "CCC, ABB, BBB, AAC, BCC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        },
        {
            "white constraint": "AA, AB, CC, BC",
            "black constraint": "AAC, BBC, ACC",
            "complexity lower bound": "constant",
            "complexity upper bound": "logarithmic"
        }
    ]
}